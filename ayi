#! /bin/sh

. gettext.sh

VERSION=$(cat /version.txt)


export TEXTDOMAINDIR=$PWD/lang
export TEXTDOMAIN=ayi
# export LANGUAGE=en_GB

alias GETTEXT='gettext'
alias EGETTEXT='eval_gettext'

echo "START LOG"
# System check.
[ -d "/sys/firmware/efi/" ] && SYSTEM="UEFI" || SYSTEM="BIOS"
DETECT_CARD="$(lspci -nn | grep "$(lspci -n | awk -F " " '{print $2 $3}' | grep ^"03" | awk -F ":" '{print $2":"$3}')" | awk -F ": " '{print $2}' | cut -d "[" -f1)"

OLDIFS=$IFS

declare -a MAIN_LIST
declare -a OTHER_LIST
declare -a KSWP_LIST
# Variables

# installer_lang

# TITLE=$(EGETTEXT "Arch Installer - \$SYSTEM mode")
# YES=$(GETTEXT "Yes")
# NO=$(GETTEXT "No")
# MAIN001=$(GETTEXT "Installer language")
# LAN=$(GETTEXT "Language")

# Functions
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}

# Mit particion√°l
Parted() {
    parted --script "$dev" "$1"
}

# Set installer language

installer_lang() {

    echo "RUN INSTALLER LANGUAGE FUNCTION"

    # Variables
    TITLE=$(EGETTEXT "MagyArch Installer - \$SYSTEM mode")
    MAIN001=$(GETTEXT "Installer language")
    MAIN002=$(GETTEXT "Keyboard settings")
    LAN=$(GETTEXT "Language")

    lang="$(yad --width=400 --center --title="$TITLE" --text="$MAIN001" \
        --buttons-layout=center --image=language-selector \
        --form --item-separator="," \
        --field="$LAN":CB \
        "^English,Magyar")"
    echo "$?"



    if [ "$(echo "$lang" | cut -d '|' -f1)" = "Magyar" ]
    then
        export LANGUAGE=hu_HU
        echo "Installer language: $(echo "$lang" | cut -d '|' -f1)"
    else
        export LANGUAGE=en_GB
        echo "Installer language: $(echo "$lang" | cut -d '|' -f1)"
    fi

    # Variables

    TITLE=$(EGETTEXT "MagyArch Installer - \$SYSTEM mode")
    YES=$(GETTEXT "Yes")
    NO=$(GETTEXT "No")
    MAIN000=$(GETTEXT "Reply from list:")
    MAIN001=$(GETTEXT "Installer language")
    MAIN002=$(GETTEXT "System language")
    MAIN003=$(GETTEXT "Keyboard settings")
    MAIN004=$(GETTEXT "Choose your location")
    MAIN005=$(GETTEXT "Hostname settings")
    MAIN006=$(GETTEXT "Username, password and root password settings")
    MAIN007=$(GETTEXT "Kernel, shell and printer settings")
    MAIN008=$(GETTEXT "Video card settings")
    MAIN009=$(GETTEXT "Display manager and desktop settings")
    MAIN010=$(GETTEXT "Other applications")
    MAIN011=$(GETTEXT "Bootloader settings")
    MAIN012=$(GETTEXT "Partition settings")
    MAIN013=$(GETTEXT "Install")
    MAIN014=$(GETTEXT "Installation is complete.")
    MAIN015=$(GETTEXT "Summary")

    LAN=$(GETTEXT "Language")
    KBL=$(GETTEXT "Keyboard layouts")
    KBM=$(GETTEXT "Keyboard models")
    TZZ=$(GETTEXT "Zone")
    TZSZ=$(GETTEXT "Sub zone")
    CLCK=$(GETTEXT "Use UTC or local time?")
    TIM=$(GETTEXT "Time")
    HSNM=$(EGETTEXT "Please enter a hostname!\nUse lowercase letters only." )
    HSNM1=$(GETTEXT "Hostname")
    URSET001=$(GETTEXT "User name")
    URSET002=$(GETTEXT "User password")
    URSET003=$(GETTEXT "Repeat user password")
    URSET004=$(GETTEXT "Root password")
    URSET005=$(GETTEXT "Repeat root password")
    ERR_USER_PASS=$(GETTEXT "User passwords do not match, please try again.")
    ERR_ROOT_PASS=$(GETTEXT "Root passwords do not match, please try again.")
    KSC001=$(GETTEXT "Kernel")
    KSC002=$(GETTEXT "Shell")
    KSC003=$(GETTEXT "Printer support (cups)")
    KSC004=$(GETTEXT "Samba support (File manager)")
    GRC001=$(GETTEXT "Video card")
    GRC002=$(EGETTEXT "\n\nDetected:\n\$DETECT_CARD\n")
    DEFAULT=$(GETTEXT "Default")
    DMDE001=$(GETTEXT "Display manager")
    DMDE002=$(GETTEXT "Desktop and WM")

    OTHER000=$(GETTEXT "Internet")
    OTHER001=$(GETTEXT "Security")
    OTHER002=$(GETTEXT "Media")
    OTHER003=$(GETTEXT "Office")
    OTHER004=$(GETTEXT "Utility")
    OTHER005=$(GETTEXT "Terminal base applications")

    OTHER_LIST=("true" "$OTHER000" "false" "$OTHER001" "false" "$OTHER002" \
        "false" "$OTHER003" "false" "$OTHER004" "false" "$OTHER005")


    INTER000=$(GETTEXT "A web browser built for speed, simplicity, and security")
    INTERSEL000=("false" "chromium" "$INTER000")

    INTER001=$(GETTEXT "Standalone web browser from mozilla.org")
    INTERSEL001=("false" "firefox" "$INTER001")

    INTER002=$(GETTEXT "Lightweight and fast web browser")
    INTERSEL002=("false" "netsurf" "$INTER002")

    INTER003=$(GETTEXT "Fast and reliable FTP, FTPS and SFTP client")
    INTERSEL003=("false" "filezilla" "$INTER003")

    INTER004=$(GETTEXT "Manage your email, contacts and schedule")
    INTERSEL004=("false" "evolution" "$INTER004")

    INTER005=$(GETTEXT "A lightweight email client for the GNOME desktop")
    INTERSEL005=("false" "geary" "$INTER005")

    INTER006=$(GETTEXT "Standalone mail and news reader from mozilla.org")
    INTERSEL006=("false" "thunderbird" "$INTER006")

    INTER007=$(GETTEXT "Fast, easy, and free BitTorrent client (GTK+ GUI)")
    INTERSEL007=("false" "transmission-gtk" "$INTER007")

    INTER008=$(GETTEXT "Fast, easy, and free BitTorrent client (Qt GUI)")
    INTERSEL008=("false" "transmission-qt" "$INTER008")

    INTER009=$(GETTEXT "An advanced BitTorrent client programmed in C++, based on Qt toolkit and libtorrent-rasterbar.")
    INTERSEL009=("false" "qbittorrent" "$INTER009")

    INTER010=$(GETTEXT "Ncurses BitTorrent client based on libTorrent")
    INTERSEL010=("false" "rtorrent" "$INTER010")

    INTER011=$(GETTEXT "A popular and easy to use graphical IRC (chat) client")
    INTERSEL011=("false" "hexchat" "$INTER011")

    INTER012=$(GETTEXT "All-in-one voice and text chat for gamers that's free and secure.")
    INTERSEL012=("false" "discord" "$INTER012")

    INTER013=$(GETTEXT "Web browser that blocks ads and trackers by default")
    INTERSEL013=("false" "firefox" "$INTER013")


    data_int=(INTERSEL000 INTERSEL001 INTERSEL013 INTERSEL002 INTERSEL003 INTERSEL004\
        INTERSEL005 INTERSEL006 INTERSEL007 INTERSEL008 INTERSEL009 INTERSEL010\
        INTERSEL011 INTERSEL012)

    OTHER_LIST_INT=("${INTERSEL000[@]}" "${INTERSEL001[@]}" "${INTERSEL013[@]}" "${INTERSEL002[@]}"\
        "${INTERSEL003[@]}" "${INTERSEL004[@]}" "${INTERSEL005[@]}" "${INTERSEL006[@]}" "${INTERSEL007[@]}"\
        "${INTERSEL008[@]}" "${INTERSEL009[@]}" "${INTERSEL010[@]}" "${INTERSEL011[@]}" "${INTERSEL012[@]}")

    # Security apps

    SEC001=$(GETTEXT "Cross platform password manager")
    SECSEL001=("false" "keepassxc" "$SEC001")

    SEC002=$(GETTEXT "Disk encryption with strong security based on TrueCrypt")
    SECSEL002=("false" "veracrypt" "$SEC002")

    SEC003=$(GETTEXT "Uncomplicated way to manage your Linux firewall")
    SECSEL003=("false" "gufw" "$SEC003")

    SEC004=$(GETTEXT "Anti-virus toolkit for Unix")
    SECSEL004=("false" "clamav" "$SEC004")

    SEC005=$(GETTEXT "Easy to use, light-weight, on-demand virus scanner for Linux systems")
    SECSEL005=("false" "clamtk" "$SEC005")

    data_int1=(SECSEL001 SECSEL002 SECSEL003 SECSEL004 SECSEL005)

    OTHER_LIST_SEC=("${SECSEL001[@]}" "${SECSEL002[@]}" "${SECSEL003[@]}" "${SECSEL004[@]}" "${SECSEL005[@]}")

    # Media apps

    MEDI000=$(GETTEXT "GNU Image Manipulation Program")
    MEDISEL000=("false" "gimp" "$MEDI000")

    MEDI001=$(GETTEXT "Multi-platform MPEG, VCD/DVD, and DivX player")
    MEDISEL001=("false" "vlc" "$MEDI001")

    MEDI002=$(GETTEXT "Movie player for the GNOME desktop based on GStreamer")
    MEDISEL002=("false" "totem" "$MEDI002")

    MEDI003=$(GETTEXT "Modern media player based on the GStreamer framework")
    MEDISEL003=("false" "parole" "$MEDI003")

    MEDI004=$(GETTEXT "Lightweight, advanced audio player focused on audio quality")
    MEDISEL004=("false" "audacious" "$MEDI004")

    MEDI005=$(GETTEXT "A modern music player and library organizer")
    MEDISEL005=("false" "clementine" "$MEDI005")

    MEDI006=$(GETTEXT "Image browser and viewer for the GNOME Desktop")
    MEDISEL006=("false" "gthumb" "$MEDI006")

    MEDI007=$(GETTEXT "A digital photo organizer designed for the GNOME desktop environment")
    MEDISEL007=("false" "shotwell" "$MEDI007")

    MEDI008=$(GETTEXT "Fast and lightweight picture-viewer for Xfce4")
    MEDISEL008=("false" "ristretto" "$MEDI008")

    MEDI009=$(GETTEXT "Lightweight image viewer")
    MEDISEL009=("false" "gpicview" "$MEDI009")

    MEDI010=$(GETTEXT "A program that lets you manipulate digital audio waveforms")
    MEDISEL010=("false" "audacity" "$MEDI010")

    MEDI011=$(GETTEXT "A feature-rich screen recorder that supports X11 and OpenGL.")
    MEDISEL011=("false" "simplescreenrecorder" "$MEDI011")

    # medi013=$(GETTEXT "")
    # medi014=$(GETTEXT "")
    # medi015=$(GETTEXT "")

    data_int2=(MEDISEL000 MEDISEL001 MEDISEL002 MEDISEL003 MEDISEL004\
        MEDISEL005 MEDISEL006 MEDISEL007 MEDISEL008 MEDISEL009 MEDISEL010\
        MEDISEL011)

    OTHER_LIST_MED=("${MEDISEL000[@]}" "${MEDISEL001[@]}" "${MEDISEL002[@]}" \
        "${MEDISEL003[@]}" "${MEDISEL004[@]}" "${MEDISEL005[@]}" "${MEDISEL006[@]}" "${MEDISEL007[@]}" \
        "${MEDISEL008[@]}" "${MEDISEL009[@]}" "${MEDISEL010[@]}" "${MEDISEL011[@]}")

    # Uffice apps

    OFFI000=$(GETTEXT "A set of applications for productivity and creative usage")
    OFFISEL000=("false" "calligra" "$OFFI000")

    OFFI001=$(GETTEXT "Fully-featured word processor")
    OFFISEL001=("false" "abiword" "$OFFI001")

    OFFI002=$(GETTEXT "A GNOME Spreadsheet Program")
    OFFISEL002=("false" "gnumeric" "$OFFI002")

    OFFI003=$(GETTEXT "Simple application for modifying PDF written in C Sharp")
    OFFISEL003=("false" "pdfmod" "$OFFI003")

    OFFI004=$(GETTEXT "Document viewer (PDF, Postscript, djvu, tiff, dvi, XPS, SyncTex support with gedit")
    OFFISEL004=("false" "evince" "$OFFI004")

    OFFI005=$(GETTEXT "Lightweight PDF document viewer")
    OFFISEL005=("false" "epdfview" "$OFFI005")

    OFFI006=$(GETTEXT "An e-book reader for Linux")
    OFFISEL006=("false" "fbreader" "$OFFI006")

    OFFI007=$(GETTEXT "LibreOffice branch which contains new features and program enhancements")
    OFFISEL007=("false" "libreoffice-fresh" "$OFFI007")

    OFFI008=$(GETTEXT "LibreOffice maintenance branch")
    OFFISEL008=("false" "libreoffice-still" "$OFFI008")


    data_int3=(OFFISEL000 OFFISEL001 OFFISEL002 OFFISEL003 OFFISEL004\
        OFFISEL005 OFFISEL006 OFFISEL007 OFFISEL008)

    OTHER_LIST_OFI=("${OFFISEL000[@]}" "${OFFISEL001[@]}" "${OFFISEL002[@]}" \
        "${OFFISEL003[@]}" "${OFFISEL004[@]}" "${OFFISEL005[@]}" "${OFFISEL006[@]}" "${OFFISEL007[@]}" \
        "${OFFISEL008[@]}")

    # Utility apps

    UTI000=$(GETTEXT "Interactive process viewer")
    UTISEL000=("false" "htop" "$UTI000")

    UTI001=$(GETTEXT "Disk Management Utility for GNOME")
    UTISEL001=("false" "gnome-disk-utility" "$UTI001")

    UTI002=$(GETTEXT "A Partition Magic clone, frontend to GNU Parted")
    UTISEL002=("false" "gparted" "$UTI002")

    UTI003=$(GETTEXT "Adjusts the color temperature of your screen according to your surroundings.")
    UTISEL003=("false" "redshift" "$UTI003")

    UTI004=$(GETTEXT "Fast and lightweight IDE")
    UTISEL004=("false" "geany" "$UTI004")

    UTI005=$(GETTEXT "Lightweight GTK+ clipboard manager")
    UTISEL005=("false" "parcellite" "$UTI005")

    UTI006=$(GETTEXT "GTK+ GUI for rsync to synchronize folders, files and make backups")
    UTISEL006=("false" "grsync" "$UTI006")

    UTI007=$(GETTEXT "Drop-down terminal for GNOME")
    UTISEL007=("false" "guake" "$UTI007")

    UTI008=$(GETTEXT "NTFS filesystem driver and utilities")
    UTISEL008=("false" "ntfs-3g" "$UTI008")

    UTI009=$(GETTEXT "Btrfs filesystem utilities")
    UTISEL009=("false" "btrfs-progs" "$UTI009")

    UTI010=$(GETTEXT "Create and modify archives")
    UTISEL010=("false" "file-roller" "$UTI010")

    # UTI011=$(GETTEXT "A powerful Pacman frontend using Qt libs")
    # UTI012=$(GETTEXT "")
    # UTI013=$(GETTEXT "")
    # UTI014=$(GETTEXT "")
    # UTI015=$(GETTEXT "")

    data_int4=(UTISEL000 UTISEL001 UTISEL002 UTISEL003 UTISEL004\
        UTISEL005 UTISEL006 UTISEL007 UTISEL008 UTISEL009 UTISEL010)

    OTHER_LIST_UTI=("${UTISEL000[@]}" "${UTISEL001[@]}" "${UTISEL002[@]}" \
        "${UTISEL003[@]}" "${UTISEL004[@]}" "${UTISEL005[@]}" "${UTISEL006[@]}" "${UTISEL007[@]}" \
        "${UTISEL008[@]}" "${UTISEL009[@]}" "${UTISEL010[@]}")

    # Terminal apps

    TER000=$(GETTEXT "Fast and light imlib2-based image viewer")
    TERSEL000=("false" "feh" "$TER000")

    TER001=$(GETTEXT "Vi Improved, a highly configurable, improved version of the vi text editor")
    TERSEL001=("false" "vim" "$TER001")

    TER002=$(GETTEXT "Pico editor clone with enhancements")
    TERSEL002=("false" "nano" "$TER002")

    TER003=$(GETTEXT "Wallpaper setting utility for X")
    TERSEL003=("false" "xwallpaper" "$TER003")

    TER004=$(GETTEXT "Customizable and lightweight notification-daemon")
    TERSEL004=("false" "dunst" "$TER004")

    TER005=$(GETTEXT "A version of mutt with added features")
    TERSEL005=("false" "neomutt" "$TER005")

    TER006=$(GETTEXT "Minimalistic document viewer")
    TERSEL006=("false" "zathura" "$TER006")

    TER007=$(GETTEXT "Simple, vim-like file manager")
    TERSEL007=("false" "ranger" "$TER007")

    # TER008=$(GETTEXT "A keyboard-driven, vim-like browser based on PyQt5")
    # TERSEL008=("false" "qutebrowser" "$TER008")

    TER009=$(GETTEXT "A simple web browser based on WebKit/GTK+.")
    TERSEL009=("false" "surf" "$TER009")

    TER010=$(GETTEXT "A cross-platform, GPU-accelerated terminal emulator")
    TERSEL010=("false" "alacritty" "$TER010")

    # TER011=$(GETTEXT "")
    # TER012=$(GETTEXT "")
    # TER013=$(GETTEXT "")
    # TER014=$(GETTEXT "")
    # TER015=$(GETTEXT "")

    data_int5=(TERSEL000 TERSEL003 TERSEL002 TERSEL001 TERSEL004\
        TERSEL005 TERSEL006 TERSEL007 TERSEL009 TERSEL010)

    OTHER_LIST_TER=("${TERSEL000[@]}" "${TERSEL003[@]}" "${TERSEL002[@]}" \
        "${TERSEL001[@]}" "${TERSEL004[@]}" "${TERSEL005[@]}" "${TERSEL006[@]}" "${TERSEL007[@]}" \
        "${TERSEL009[@]}" "${TERSEL010[@]}")


    PART000=$(GETTEXT "Automatic partitioning")
    PART001=$(GETTEXT "Manual partitioning")

    PART_LIST=("false" "$PART000" "false" "$PART001")

    QUEPART000=$(EGETTEXT "ATTENTION!\nThis will erase ALL data here: ")
    QUEPART001=$(EGETTEXT "\nAre you sure you want to continue?")

    CRBIOS=$(GETTEXT "Creating BIOS partition...")
    CRUEFI=$(GETTEXT "Creating UEFI partition...")

    MANQ000=$(EGETTEXT "Do you need to partition?\n\
If you select \${YES}, the GParted partitioning program will open.\n\
Partition and format your hard disk, as this is not done by the installer!")

    KSWP000=$(GETTEXT "Swap partition")
    KSWP001=$(GETTEXT "Swap file")
    KSWP002=$(GETTEXT "No swap")
    KSWP003=$(GETTEXT "What kind of swap do you want?")
    KSWP004=$(GETTEXT "Choose swapfile size")
    KSWP005=$(GETTEXT "Choose swapfile size")

    KSWP_LIST=("false" "$KSWP000" "true" "$KSWP001" "false" "$KSWP002")

    MNT001=$(GETTEXT "Mount point (/)")
    MNT002=$(GETTEXT "Mount point (/boot)")
    MNT003=$(GETTEXT "Mount point (/boot/efi)")
    MNT004=$(GETTEXT "Mount point (/home)")
    MNT005=$(GETTEXT "Mount point (/opt)")
    MNT006=$(GETTEXT "Mount point (swap)")
    MNT007=$(GETTEXT "Mount point (/srv)")
    MNT008=$(GETTEXT "Mount point (/tmp)")
    MNT009=$(GETTEXT "Mount point (/usr)")
    MNT010=$(GETTEXT "Mount point (/var)")
    MNT011=$(GETTEXT "Mount point (/mnt)")
    NONE=$(GETTEXT "None")

    ERROR000=$(GETTEXT "No root partition selected!")
    ERROR001=$(GETTEXT "No swap partition selected!")
    ERROR002=$(EGETTEXT "No boot / efi partition selected!\nA boot / efi partition is required for UEFI installation.")
    ERROR003=$(GETTEXT "You have chosen the same partition multiple times!")
    ERROR004=$(EGETTEXT "Refind cannot be installed in \$SYSTEM mode.")

    BTL000=$(GETTEXT "Bootloader")
    BTL001=$(GETTEXT "Grub install")

    INS000=$(GETTEXT "Creating mirror list...")
    INS001=$(GETTEXT "Making fstab...")
    INS002=$(GETTEXT "Set the root password...")
    INS002=$(GETTEXT "Set the user password...")
    INS003=$(GETTEXT "Set Language...")
    INS004=$(GETTEXT "Set timezone...")
    INS005=$(GETTEXT "Install default applications...")
    INS006=$(GETTEXT "Set video card...")
    INS007=$(GETTEXT "Create a swap file...")
    INS008=$(GETTEXT "Other install...")
    INS009=$(GETTEXT "Install base...")
    INS010=$(GETTEXT "Installing bootloader...")
    INS011=$(GETTEXT "Installation is complete!")
    # INS012=$(GETTEXT "")
    # INS00=$(GETTEXT "")
    DISKTYPE000=$(GETTEXT "Normal")
    DISKTYPE001=$(GETTEXT "LVM")
    DISKTYPE002=$(GETTEXT "LVM + LUKS (encrypt)")



    MAIN_LIST=("false" "$MAIN001" "true" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")

}

# Set system language

system_lang() {

    echo "RUN SYSTEM LANGUAGE FUNCTION"

    lang_list="$(grep -v "#  " /etc/locale.gen | sed 's/#//g' | sed 's/ UTF-8//g' | \
        grep .UTF-8  | tr ' ' '\n' | sort | uniq | tr "\n" "," | sed "s/${LANGUAGE}/^${LANGUAGE}/")"

    sys_lang="$(yad --width=400 --center --title="$TITLE" --text="$MAIN002" \
        --buttons-layout=center --image=language-selector \
        --form --item-separator="," \
        --field="$LAN":CB \
        "${lang_list:0:-1}")"
    echo ""$?

    echo "System language: $(echo $sys_lang | cut -d '|' -f1)"

    KEYBOARD_LAYOUT=$(echo "${sys_lang,,}" | sed "s/.utf-8|//" | cut -d '_' -f2)

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "true" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}

# Set keyboard layout

keyboard_set() {

    echo "RUN KEYBOARD SETTINGS FUNCTION"

    kb_set="$(yad --width=400 --center --title="$TITLE" --text="$MAIN003" \
        --buttons-layout=center --image=input-keyboard \
        --form --item-separator="," \
        --field="$KBL":CBE \
        --field="$KBM":CBE \
        "$(localectl list-x11-keymap-layouts | awk '{ printf ""$0"," }' | sed "s/${KEYBOARD_LAYOUT}/^$KEYBOARD_LAYOUT/")" \
        "$(localectl list-x11-keymap-models | awk '{ printf ""$0"," }' | sed "s/pc105/^pc105/")")"
    echo "$?"

    echo "Keyboard layout: $(echo $kb_set | cut -d '|' -f1)"
    echo "Keyboard modell: $(echo $kb_set | cut -d '|' -f2)"

    setxkbmap $(echo $kb_set | cut -d '|' -f1)

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "true" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}

# Set timezone

timezone_set() {

    echo "RUN TIMEZONE FUNCTION"

    DEFAULT_ZONE="$(awk '{print $1 "," $3 }' /usr/share/zoneinfo/zone.tab | \
        grep "${KEYBOARD_LAYOUT^^}" | sort | awk -F ',' '{print $2}' | cut -d "/" -f1 | sed -n "1p")"

    DEFAULT_SUBZONE="$(awk '{print $1 "," $3 }' /usr/share/zoneinfo/zone.tab | \
        grep "${KEYBOARD_LAYOUT^^}" | sort | awk -F ',' '{print $2}' | cut -d "/" -f2 | sed -n "1p")"

    tzzone_set="$(yad --width=400 --center --title="$TITLE" --text="$MAIN004" \
        --buttons-layout=center --image=globe \
        --form --item-separator="," \
        --field="$TZZ":CB \
        "$(awk '{print $3}' /usr/share/zoneinfo/zone.tab | grep "/" | cut -d "/" -f1 | sort -ud | tr "\n" "," | \
            sed "s/${DEFAULT_ZONE}/^${DEFAULT_ZONE}/")")"
    echo "$?"

    TZONE=$(echo $tzzone_set | cut -d "|" -f1)
    echo "Select timezone: $TZONE"

    if [ "$DEFAULT_ZONE" = "$(echo "$tzzone_set" | cut -d "|" -f1)" ]
    then
        tzszone_set=$(yad --width=400 --center --title="$TITLE" --text="$MAIN004" \
            --buttons-layout=center --image=globe \
            --form --item-separator="," \
            --field="$TZSZ":CB \
            "$(awk '{print $3}' /usr/share/zoneinfo/zone.tab | grep "${DEFAULT_ZONE}" | cut -d "/" -f2 | sort | tr "\n" "," |\
                sed "s/${DEFAULT_SUBZONE}/^${DEFAULT_SUBZONE}/")")
        echo "$?"
        echo "Select subzone0: $(echo tzszone_set | cut -d '|' -f1)"
    else
        tzszone_set=$(yad --width=400 --center --title="$TITLE" --text="$MAIN004" \
            --buttons-layout=center --image=globe \
            --form --item-separator="," \
            --field="$TZSZ":CB \
            "$(awk '{print $3}' /usr/share/zoneinfo/zone.tab | grep "$(echo "$tzzone_set" | cut -d "|" -f1)" | cut -d "/" -f2 | sort | tr "\n" "," )")
        echo "$?"
        echo "Select subzone1: $(echo tzszone_set | cut -d '|' -f1)"
    fi

    clock="$(yad --width=400 --center --title="$TITLE" --text="$CLCK" \
        --buttons-layout=center --image=clock \
        --form --item-separator="," \
        --field="$TIM":CB \
        "^utc,localtime")"
    echo "$?"
    echo "Select clock set: $(echo $clock | cut -d '|' -f1)"

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "true" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}

# Set hostname

hname() {

    echo "RUN HOSTNAME FUNCTION"

    hsname="$(yad --width=400 --center --title="$TITLE" --text="$HSNM" \
        --buttons-layout=center --image=network \
        --form --field="$HSNM1" \
        "magyarch" )"

    echo "$?"
    # echo "Select hostname set: $(echo $hsname | cut -d '|' -f1)"

    unset MAIN_LIST
    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "true" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}


user_root_set() {

    echo "RUN USER ROOT SET FUNCTION"

    pass_check $(yad --width=400 --center --title="$TITLE" --text="$MAIN006" \
        --buttons-layout=center --image=password \
        --form  --separator="\t" \
        --field="$HSNM1" \
        --field="$URSET001" \
        --field="$URSET002":H \
        --field="$URSET003":H \
        --field="$URSET004":H \
        --field="$URSET005":H \
        "magyarch")


    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "true" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}


# Check password
pass_check() {

    echo "RUN PASS CHECK FUNCTION"

    hsname=$1
    user_name=${2,,}
    userpass1=$3
    userpass2=$4
    rootpass1=$5
    rootpass2=$6

    if [ "$userpass1" != "$userpass2" ]
    then
        yad --image=error --title="$TITLE"  --buttons-layout=center --text="$ERR_USER_PASS"
        echo "Not same user password"
        user_root_set
    elif [ "$rootpass1" != "$rootpass2" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERR_ROOT_PASS"
        echo "Not same root password"
        user_root_set
    fi
}


kernel_shell_cups_set() {

    ker_sh_cup="$(yad --width=400 --center --title="$TITLE" --text="$MAIN007" \
        --buttons-layout=center --image=preferences \
        --form  --item-separator="," \
        --field="$KSC001":CB \
        --field="$KSC002":CB \
        --field="$KSC003":CB \
        --field="$KSC004":CB \
        "^linux,linux-lts" \
        "^bash,zsh,fish" \
        "^${NO},${YES}" \
        "^${NO},${YES}" )"

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "true" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011")
}


graphics_set() {
    grap="$(yad --width=400 --center --title="$TITLE" --text="$MAIN008" \
        --buttons-layout=center --image=input-gaming \
        --form  --item-separator="," \
        --field="$GRC001":CB \
        --field="$GRC002":LBL \
        "${NONE},amdgpu,i915,nouveau,nvidia,virtualbox")"

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "true" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}


dm_desktop_set() {

    dm_des="$(yad --width=400 --center --title="$TITLE" --text="$MAIN009" \
        --buttons-layout=center --image=desktop \
        --form  --item-separator="," \
        --field="$DMDE001":CB \
        --field="$DMDE002":CB \
        "^lightdm,lxdm,sddm,gdm,${DEFAULT}" \
        "awesome (MagyArch),bspwm (MagyArch),dwm (MagyArch),herbstluftwm (MagyArch),i3 (MagyArch),i3+polybar (MagyArch),qtile (MagyArch),spectrwm (MagyArch),xfce4 (MagyArch),xmonad (MagyArch),\
xmonad+polybar (MagyArch),awesome,bspwm,budgie-desktop,cinnamon,deepin,dwm,gnome,herbstluftwm,i3,jwm,lxde,lxqt,mate,openbox,plasma,qtile,spectrwm,xfce4,xmonad")"


    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "true" "$MAIN011" "false" "$MAIN013")
}


other_apps_int() {


    if [ "$pack_int" != "" ]
    then

        pack_list_int=(${pack_int})
        for k in ${data_int[@]}
        do
            eval ${k}[0]='"false"'
        done

        for j in "${pack_list_int[@]}"
        do
            for i in ${data_int[@]}
            do
                ch_l=${i}[1]

                if [ "$j" == "${!ch_l}" ]
                then

                    unset OTHER_LIST_INT
                    eval ${i}[0]='"true"'

                    OTHER_LIST_INT=("${INTERSEL000[@]}" "${INTERSEL001[@]}" "${INTERSEL013[@]}" "${INTERSEL002[@]}"\
                        "${INTERSEL003[@]}" "${INTERSEL004[@]}" "${INTERSEL005[@]}" "${INTERSEL006[@]}" "${INTERSEL007[@]}"\
                        "${INTERSEL008[@]}" "${INTERSEL009[@]}" "${INTERSEL010[@]}" "${INTERSEL011[@]}" "${INTERSEL012[@]}")
                fi
            done
        done
    fi

    oth_int="$(yad  --width=400 --height=450 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER000"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_INT[@]}")"

    pack_int=$(echo $oth_int | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo $pack_int

    unset OTHER_LIST

    OTHER_LIST=("false" "$OTHER000" "true" "$OTHER001" "false" "$OTHER002" \
        "false" "$OTHER003" "false" "$OTHER004" "false" "$OTHER005")
}


other_apps_sec() {

    if [ "$pack_sec" != "" ]
    then

        pack_list_sec=(${pack_sec})
        for k in ${data_int1[@]}
        do
            eval ${k}[0]='"false"'
        done

        for j in "${pack_list_sec[@]}"
        do
            for i in ${data_int1[@]}
            do
                ch_l1=${i}[1]

                if [ "$j" == "${!ch_l1}" ]
                then

                    unset OTHER_LIST_SEC
                    eval ${i}[0]='"true"'

                    OTHER_LIST_SEC=("${SECSEL001[@]}" "${SECSEL003[@]}" "${SECSEL003[@]}" "${SECSEL004[@]}" "${SECSEL005[@]}")

                fi
            done
        done
    fi

    oth_sec="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER001"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_SEC[@]}")"

    pack_sec=$(echo $oth_sec | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo $pack_sec


    unset OTHER_LIST

    OTHER_LIST=("false" "$OTHER000" "false" "$OTHER001" "true" "$OTHER002" \
        "false" "$OTHER003" "false" "$OTHER004" "false" "$OTHER005")
}


other_apps_med() {

    if [ "$pack_med" != "" ]
    then

        pack_list_med=(${pack_med})
        for k in ${data_int2[@]}
        do
            eval ${k}[0]='"false"'

        done

        for j in "${pack_list_med[@]}"
        do
            for i in ${data_int2[@]}
            do
                ch_l2=${i}[1]

                if [ "$j" == "${!ch_l2}" ]
                then

                    unset OTHER_LIST_MED
                    eval ${i}[0]='"true"'

                    OTHER_LIST_MED=("${MEDISEL000[@]}" "${MEDISEL001[@]}" "${MEDISEL002[@]}" \
                        "${MEDISEL003[@]}" "${MEDISEL004[@]}" "${MEDISEL005[@]}" "${MEDISEL006[@]}" "${MEDISEL007[@]}" \
                        "${MEDISEL008[@]}" "${MEDISEL009[@]}" "${MEDISEL010[@]}" "${MEDISEL011[@]}")
                fi
            done
        done
    fi

    oth_med="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER002"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_MED[@]}")"

    pack_med=$(echo $oth_med | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo $pack_med


   unset OTHER_LIST

   OTHER_LIST=("false" "$OTHER000" "false" "$OTHER001" "false" "$OTHER002" \
        "true" "$OTHER003" "false" "$OTHER004"  "false" "$OTHER005")
}


other_apps_ofi() {

    if [ "$pack_ofi" != "" ]
    then

        pack_list_ofi=(${pack_ofi})
        for k in ${data_int3[@]}
        do
            eval ${k}[0]='"false"'
        done

        for j in "${pack_list_ofi[@]}"
        do
            for i in ${data_int3[@]}
            do
                ch_l3=${i}[1]

                if [ "$j" == "${!ch_l3}" ]
                then

                    unset OTHER_LIST_OFI
                    eval ${i}[0]='"true"'

                    OTHER_LIST_OFI=("${OFFISEL000[@]}" "${OFFISEL001[@]}" "${OFFISEL002[@]}" \
                        "${OFFISEL003[@]}" "${OFFISEL004[@]}" "${OFFISEL005[@]}" "${OFFISEL006[@]}" "${OFFISEL007[@]}" \
                        "${OFFISEL008[@]}")
                fi
            done
        done
    fi

    oth_ofi="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER003"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_OFI[@]}")"

    pack_ofi=$(echo $oth_ofi | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo $pack_ofi


    unset OTHER_LIST

    OTHER_LIST=("false" "$OTHER000"  "false" "$OTHER001" "false" "$OTHER002" \
        "false" "$OTHER003" "true" "$OTHER004" "false" "$OTHER005")
}


other_apps_uti() {

    if [ "$pack_uti" != "" ]
    then

        pack_list_uti=(${pack_uti})
        for k in ${data_int4[@]}
        do
            eval ${k}[0]='"false"'
        done

        for j in "${pack_list_uti[@]}"
        do
            for i in ${data_int4[@]}
            do
                ch_l4=${i}[1]

                if [ "$j" == "${!ch_l4}" ]
                then

                    unset OTHER_LIST_UTI
                    eval ${i}[0]='"true"'

                    OTHER_LIST_UTI=("${UTISEL000[@]}" "${UTISEL001[@]}" "${UTISEL002[@]}" \
                        "${UTISEL003[@]}" "${UTISEL004[@]}" "${UTISEL005[@]}" "${UTISEL006[@]}" "${UTISEL007[@]}" \
                        "${UTISEL008[@]}" "${UTISEL009[@]}" "${UTISEL010[@]}")
                fi
            done
        done
    fi

    oth_uti="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER004"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_UTI[@]}")"

    pack_uti=$(echo $oth_uti | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo $pack_uti

    unset OTHER_LIST

    OTHER_LIST=("false" "$OTHER000"  "false" "$OTHER001" "false" "$OTHER002" \
        "false" "$OTHER003" "false" "$OTHER004" "true" "$OTHER005")


   # OTHER_LIST=("false" "$OTHER000" "false" "$OTHER001" "false" "$OTHER002" \
   #     "false" "$OTHER003" "true" "$OTHER004" )
}

other_apps_ter() {

    if [ "$pack_ter" != "" ]
    then

        pack_list_ter=(${pack_ter})
        for k in ${data_int5[@]}
        do
            eval ${k}[0]='"false"'
        done

        for j in "${pack_list_ter[@]}"
        do
            for i in ${data_int5[@]}
            do
                ch_l5=${i}[1]

                if [ "$j" == "${!ch_l5}" ]
                then

                    unset OTHER_LIST_TER
                    eval ${i}[0]='"true"'

                    OTHER_LIST_TER=("${TERSEL000[@]}" "${TERSEL003[@]}" "${TERSEL002[@]}" \
                        "${TERSEL001[@]}" "${TERSEL004[@]}" "${TERSEL005[@]}" "${TERSEL006[@]}" "${TERSEL007[@]}" \
                        "${TERSEL009[@]}" "${TERSEL010[@]}")
                fi
            done
        done
    fi

    oth_ter="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$OTHER005"\
        --no-selection  --image=preferences --checklist --list --no-headers \
        --column="" --column="" --column="" "${OTHER_LIST_TER[@]}")"
    # echo $oth_ter

    pack_ter=$(echo $oth_ter | sed "s/ TRUE/;TRUE/g" | tr ";" "\n" | cut -d '|' -f2 | tr '\n' " ")
    echo "$pack_ter"
}

other_app_set() {

    oth_app="$(yad  --width=400 --height=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$MAIN010" \
        --no-selection  --image=preferences --radiolist --list --no-headers \
        --column="" --column="" "${OTHER_LIST[@]}")"

    if [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER000" ]
    then
        other_apps_int;other_app_set
        return 1


    elif [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER001" ]
    then
        other_apps_sec;other_app_set

    elif [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER002" ]
    then
        other_apps_med;other_app_set

    elif [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER003" ]
    then
        other_apps_ofi;other_app_set

    elif [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER004" ]
    then
        other_apps_uti;other_app_set

    elif [ "$(echo "$oth_app" | cut -d "|" -f2)" = "$OTHER005" ]
    then
        other_apps_ter
    fi

    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
}

grub_set() {

    devices="$(lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u | sed 's/disk//g' | awk '{print "false " $0}')"

    # grub_dev=
    grb_set="$(yad  --width=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$BTL001" \
        --no-selection  --image=preferences --radiolist --list --no-headers \
        --column="" --column="" $devices)"

    # grb_dev=$(echo $grb_set | cut -d '|' -f2)
}


bootloader_set() {
    bootloader="$(yad  --width=400 --height=250 --center \
        --buttons-layout=center --title="$TITLE" --text="$BTL000" \
        --no-selection  --image=preferences --radiolist --list --no-headers \
        --column="" --column="" false grub false refind false ${NONE})"

    unset MAIN_LIST
    # boot_sel=$(echo $bootloader | cut -d '|' -f2)
    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "true" "$MAIN013")

    if [ "$(echo "$bootloader" | cut -d "|" -f2)" = "grub" ]
    then
        grub_set
    fi

    if [ "$(echo "$bootloader" | cut -d "|" -f2)" = "refind" -a "$SYSTEM" = "BIOS" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR004"
        bootloader_set
        return 1
    fi

}


auto_part() {
    # devices="$(lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u | sed "s/ disk//g" | awk '{print "false " $0}')"
    # device="$(yad  --width=400 --center \
    #     --buttons-layout=center --title="$TITLE" --text="$MAIN012" \
    #     --no-selection  --image=preferences --radiolist --list --no-headers \
    #     --column="" --column="" $devices)"
    # dev="$(echo "$device" | cut -d "|" -f2)"
    devices=$(lsblk -lno PATH,TYPE,SIZE,MODEL | grep 'disk' | awk '{$1=$1;} NF=NF' | sed "s/ disk//g" | tr "\n" ";")

    device="$(yad --width=400 --center --title="$TITLE" --text="$MAIN012" \
        --buttons-layout=center --image=preferences \
        --form --item-separator=";" \
        --field="Disk":CB "${devices:0:-1}")"

    dev="$(echo "$device" | awk '{print $1}')"
    echo "$dev"
    if [ "$dev" = "" ]
    then
        echo "no"
        auto_part
        return 1
    fi

    yad --image=help --title="$TITLE" --buttons-layout=center --text="$QUEPART000 $device $QUEPART001" --button="${NO}!gtk-no:1" --button="${YES}!gtk-yes:0"
    ans="$?"

    if [ "$ans" = "0" ]
    then
        if [ "${dev:0:9}" = "/dev/nvme" -a "$SYSTEM" = "BIOS" ]
        then
            root_part=${dev}p1
        elif [ "${dev:0:9}" = "/dev/nvme" -a "$SYSTEM" != "BIOS" ]
        then
            gpt_part=${dev}p1
            root_part=${dev}p2
        elif [ "${dev:0:9}" != "/dev/nvme" -a "$SYSTEM" = "BIOS" ]
        then
            root_part=${dev}1
        elif [ "${dev:0:9}" != "/dev/nvme" -a "$SYSTEM" != "BIOS" ]
        then
            gpt_part=${dev}1
            root_part=${dev}2
        fi

        ram="$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')"
        num=4000

        if [ "$ram" -gt "$num" ]
        then
            swap_space=4096
        else
            swap_space="$ram"
        fi

        if [ "$SYSTEM" = "BIOS" ]
        then

            partition_type="auto_bios"

            # (echo "# $CRBIOS"
            # dd if=/dev/zero of="$dev" bs=512 count=1
            # Parted "mklabel msdos"
            # Parted "mkpart primary ext4 1MiB 100%"
            # Parted "set 1 boot on"
            # mkfs.ext4 -F "$root_part"
            # mount "$root_part" /mnt
            # touch /mnt/swapfile
            # dd if=/dev/zero of=/mnt/swapfile bs=1M count="${swap_space}"
            # chmod 600 /mnt/swapfile
            # mkswap /mnt/swapfile
            # swapon /mnt/swapfile
            # swapfile="yes") | yad --progress --title="$TITLE" --width=450 --pulsate --auto-close --no-buttons
        else

            partition_type="auto_uefi"

            # (echo "# $CRUEFI"
            # dd if=/dev/zero of="$dev" bs=512 count=1
            # Parted "mklabel gpt"
            # Parted "mkpart primary fat32 1MiB 513MiB"
            # Parted "mkpart primary ext4 513MiB 100%"
            # Parted "set 1 boot on"
            # mkfs.fat -F32 "$gpt_part"
            # mkfs.ext4 -F "$root_part"
            # mount "$root_part" /mnt
            # mkdir -p /mnt/boot/efi
            # mount "$gpt_part" /mnt/boot/efi
            # touch /mnt/swapfile
            # dd if=/dev/zero of=/mnt/swapfile bs=1M count="${swap_space}"
            # chmod 600 /mnt/swapfile
            # mkswap /mnt/swapfile
            # swapon /mnt/swapfile
            # swapfile="yes" ) | yad --progress --title="$TITLE" --width=450 --pulsate --auto-close --no-buttons
        fi
    else
        partition_set
    fi
}


man_part() {

    yad --image=help --title="$TITLE" --buttons-layout=center --text="$MANQ000" --button="${NO}!gtk-no:1" --button="${YES}!gtk-yes:0"
    ans1="$?"

    if [ "$ans1" = "0" ]
    then
        gparted
        kswp
    else
        kswp
    fi
}


kswp() {



    swap_query="$(yad  --width=400 --height=200 --center --no-headers \
        --buttons-layout=center --title="$TITLE" --text="$KSWP003" \
        --no-selection  --image=help --radiolist --list \
        --column="" --column="" "${KSWP_LIST[@]}")"

    swap_que=$(echo $swap_query | cut -d "|" -f2)



    if [ "$swap_que" = "$KSWP000" ]
    then
        kswpnofile
    elif [ "$swap_que" = "$KSWP001" ]
    then
        kswpf
    else
        kswpno
    fi
}


check_kswpnofile() {

    IFS=";"

    echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}

    rootszamlal=0
    bootszamlal=0
    bootefiszamlal=0
    homeszamlal=0
    mntszamlal=0
    optszamlal=0
    swapszamlal=0
    srvszamlal=0
    tmpszamlal=0
    usrszamlal=0
    varszamlal=0
    nincsszamlal=0

    root_part=$(echo "$1" | cut -d " " -f1)
    boot_part=$(echo "$2" | cut -d " " -f1)
    bootefi_part=$(echo "$3" | cut -d " " -f1)
    home_part=$(echo "$4" | cut -d " " -f1)
    mnt_part=$(echo "$5" | cut -d " " -f1)
    opt_part=$(echo "$6" | cut -d " " -f1)
    swap_part=$(echo "$7" | cut -d " " -f1)
    srv_part=$(echo "$8" | cut -d " " -f1)
    tmp_part=$(echo "$9" | cut -d " " -f1)
    usr_part=$(echo "${10}" | cut -d " " -f1)
    var_part=$(echo "${11}" | cut -d " " -f1)

    echo "$root_part $boot_part $bootefi_part $home_part $opt_part $swap_part $srv_part $tmp_part $usr_part $var_part"

    # Root csatol√°s nem lehet √ºres...
    if [ "$root_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR000"
        kswpnofile
        return 1
    # Ha swap part√≠ci√≥, ez se lehet √ºres...
    elif [ "$swap_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR001"
        kswpnofile
        return 1
    elif [ "$SYSTEM" = "UEFI" -a "$bootefi_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR002"
        kswpnofile
        return 1
    fi

    # H√°nyszor szerepel a part√≠ci√≥
    #sas=($root_part $boot_part $bootefi_part $home_part  $opt_part $swap_part $srv_part $tmp_part $usr_part $var_part)
    for i in { $root_part $boot_part $bootefi_part $home_part $mnt_part $opt_part $swap_part $srv_part $tmp_part $usr_part $var_part }
    do
        if [ "$i" = "$root_part" ]
        then
            ((rootszamlal++))
        fi

        if [ "$i" = "$boot_part" -a "$i" != "${NONE}" ]
        then
            ((bootszamlal++))
        fi

        if [ "$i" = "$bootefi_part" -a "$i" != "${NONE}" ]
        then
            ((bootefiszamlal++))
        fi

        if [ "$i" = "$home_part" -a "$i" != "${NONE}" ]
        then
            ((homeszamlal++))
        fi

        if [ "$i" = "$mnt_part" -a "$i" != "${NONE}" ]
        then
            ((mntszamlal++))
        fi

        if [ "$i" = "$opt_part" -a "$i" != "${NONE}" ]
        then
            ((optszamlal++))
        fi

        if [ "$i" = "$swap_part" ]
        then
            ((swapszamlal++))
        fi

        if [ "$i" = "$srv_part" -a "$i" != "${NONE}" ]
        then
            ((srvszamlal++))
        fi

        if [ "$i" = "$tmp_part" -a "$i" != "${NONE}" ]
        then
            ((tmpszamlal++))
        fi

        if [ "$i" = "$usr_part" -a "$i" != "${NONE}" ]
        then
            ((usrszamlal++))
        fi

        if [ "$i" = "$var_part" -a "$i" != "${NONE}" ]
        then
            ((varszamlal++))
        fi

        if [ "$i" = "${NONE}" ]
        then
            ((nincsszamlal++))
        fi

    done

    echo $rootszamlal $bootszamlal $bootefiszamlal $homeszamlal $optszamlal $swapszamlal $srvszamlal $tmpszamlal $usrszamlal $varszamlal $nincsszamlal

    # Check double selection
    if [ "$rootszamlal" -gt "1" -o "$bootszamlal" -gt "1" -o \
        "$bootefiszamlal" -gt "1" -o "$homeszamlal" -gt "1"  -o "$mntszamlal" -gt "1" -o \
        "$optszamlal" -gt "1" -o "$swapszamlal" -gt "1" -o \
        "$srvszamlal" -gt "1" -o "$tmpszamlal" -gt "1" -o \
        "$usrszamlal" -gt "1" -o "$varszamlal" -gt "1" ]
        then
            yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR003"
            kswpnofile
            return 1
    fi

    partition_type="man_swap_part"

    # # Mount
    # mount "$root_part" /mnt

    # # mkdir -p /mnt/boot/efi
    # # mount "$bootefi_part" /mnt/boot/efi

    # mkswap "$swap_part"
    # swapon "$swap_part"

    # if [ "$boot_part" != "$NONE" ]
    # then
    #     mkdir /mnt/boot/
    #     mount "$boot_part" /mnt/boot
    # fi

    # if [ "$bootefi_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/boot/efi
    #     mount "$bootefi_part" /mnt/boot/efi
    # fi

    # if [ "$home_part" != "$NONE" ]
    # then
    #     mkdir /mnt/home
    #     mount "$home_part" /mnt/home
    # fi

    # if [ "$mnt_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/mnt/disk
    #     mount "$mnt_part" /mnt/mnt/disk
    # fi

    # if [ "$opt_part" != "$NONE" ]
    # then
    #     mkdir /mnt/opt
    #     mount "$opt_part" /mnt/opt
    # fi

    # if [ "$srv_part" != "$NONE" ]
    # then
    #     mkdir /mnt/srv
    #     mount "$srv_part" /mnt/srv
    # fi

    # if [ "$tmp_part" != "$NONE" ]
    # then
    #     mkdir /mnt/tmp
    #     mount "$tmp_part" /mnt/tmp
    # fi

    # if [ "$usr_part" != "$NONE" ]
    # then
    #     mkdir /mnt/usr
    #     mount "$usr_part" /mnt/usr
    # fi

    # if [ "$var_part" != "$NONE" ]
    # then
    #     mkdir /mnt/var
    #     mount "$var_part" /mnt/var
    # fi
    IFS=$OLDIFS

}


kswpnofile() {

    # devices="$(lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u | sed "s/ disk//g" | awk '{print "false " $0}')"

    # device="$(yad  --width=400 --center \
    #     --buttons-layout=center --title="$TITLE" --text="$MAIN012" \
    #     --no-selection  --image=preferences --radiolist --list \
    #     --column="" --column="" $devices)"
    # dev="$(echo "$device" | cut -d "|" -f2)"
    # echo $dev

    # las=$(sudo fdisk -l | grep "$dev" | grep -v Disk | awk '{print $1}' | tr "\n" ",")
    # echo $las
    las=$(lsblk -lno NAME,SIZE,FSTYPE,TYPE | grep "part" | awk -F " " '{print "/dev/"$1 " " $2 " " $3}'| tr "\n" ";")

    selpart2=$(yad --width=400 --center --title="$TITLE" --text="" \
        --buttons-layout=center --image=preferences \
        --form  --item-separator=";" --separator=";" \
        --field="$MNT001":CB \
        --field="$MNT002":CB \
        --field="$MNT003":CB \
        --field="$MNT004":CB \
        --field="$MNT011":CB \
        --field="$MNT005":CB \
        --field="$MNT006":CB \
        --field="$MNT007":CB \
        --field="$MNT008":CB \
        --field="$MNT009":CB \
        --field="$MNT010":CB \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}")

    IFS=";"
    check_kswpnofile $selpart2
}


check_kswpf() {

    IFS=";"
    echo "ebyes"
    echo $1
    echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}
    echo $1

    rootszamlal=0
    bootszamlal=0
    bootefiszamlal=0
    homeszamlal=0
    mntszamlal=0
    optszamlal=0
    # swapszamlal=0
    srvszamlal=0
    tmpszamlal=0
    usrszamlal=0
    varszamlal=0
    nincsszamlal=0

    root_part=$(echo $1 | cut -d " " -f1)
    boot_part=$(echo $2 | cut -d " " -f1)
    bootefi_part=$(echo $3 | cut -d " " -f1)
    home_part=$(echo $4 | cut -d " " -f1)
    mnt_part=$(echo $5 | cut -d " " -f1)
    opt_part=$(echo $6 | cut -d " " -f1)
    # swap_part=$(echo "$6" | cut -d " " -f1)
    srv_part=$(echo $7 | cut -d " " -f1)
    tmp_part=$(echo $8 | cut -d " " -f1)
    usr_part=$(echo $9 | cut -d " " -f1)
    var_part=$(echo ${10} | cut -d " " -f1)

    echo "ez a 2"
    echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}
    echo $root_part
    echo $boot_part
    echo -e "$bootefi_part $home_part $mnt_part $opt_part $srv_part $tmp_part $usr_part $var_part"

    # Root csatol√°s nem lehet √ºres...
    if [ "$root_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR000"
        kswpf
        return 1
    # Ha swap part√≠ci√≥, ez se lehet √ºres...
    # elif [ "$swap_part" = "${NONE}" ]
    # then
    #     yad --image=error  --buttons-layout=center --text="$ERROR001"
    #     kswpnofile
    #     return 1
    elif [ "$SYSTEM" = "UEFI" -a "$bootefi_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR002"
        kswpf
        return 1
    fi

    # H√°nyszor szerepel a part√≠ci√≥
    #sas=($root_part $boot_part $bootefi_part $home_part  $opt_part $swap_part $srv_part $tmp_part $usr_part $var_part)
    for i in { $root_part $boot_part $bootefi_part $home_part $mnt_part $opt_part $srv_part $tmp_part $usr_part $var_part }
    do
        if [ "$i" = "$root_part" ]
        then
            ((rootszamlal++))
        fi

        if [ "$i" = "$boot_part" -a "$i" != "${NONE}" ]
        then
            ((bootszamlal++))
        fi

        if [ "$i" = "$bootefi_part" -a "$i" != "${NONE}" ]
        then
            ((bootefiszamlal++))
        fi

        if [ "$i" = "$home_part" -a "$i" != "${NONE}" ]
        then
            ((homeszamlal++))
        fi

        if [ "$i" = "$mnt_part" -a "$i" != "${NONE}" ]
        then
            ((mntszamlal++))
        fi

        if [ "$i" = "$opt_part" -a "$i" != "${NONE}" ]
        then
            ((optszamlal++))
        fi

        # if [ "$i" = "$swap_part" ]
        # then
        #     ((swapszamlal++))
        # fi

        if [ "$i" = "$srv_part" -a "$i" != "${NONE}" ]
        then
            ((srvszamlal++))
        fi

        if [ "$i" = "$tmp_part" -a "$i" != "${NONE}" ]
        then
            ((tmpszamlal++))
        fi

        if [ "$i" = "$usr_part" -a "$i" != "${NONE}" ]
        then
            ((usrszamlal++))
        fi

        if [ "$i" = "$var_part" -a "$i" != "${NONE}" ]
        then
            ((varszamlal++))
        fi

        if [ "$i" = "${NONE}" ]
        then
            ((nincsszamlal++))
        fi

    done

    echo $rootszamlal $bootszamlal $bootefiszamlal $homeszamlal $optszamlal $srvszamlal $tmpszamlal $usrszamlal $varszamlal $nincsszamlal

    # Check double selection
    if [ "$rootszamlal" -gt "1" -o "$bootszamlal" -gt "1" -o \
        "$bootefiszamlal" -gt "1" -o "$homeszamlal" -gt "1" -o \
        "$mntszamlal" -gt "1" -o "$optszamlal" -gt "1" -o \
        "$srvszamlal" -gt "1" -o "$tmpszamlal" -gt "1" -o \
        "$usrszamlal" -gt "1" -o "$varszamlal" -gt "1" ]
        then
            yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR003"
            kswpf
            return 1
    fi

    # Mount
    # mount $root_part /mnt

    # mkdir -p /mnt/boot/efi
    # mount "$bootefi_part" /mnt/boot/efi

    # mkswap "$swap_part"
    # swapon "$swap_part"

    echo $root_part
    partition_type="man_swap_file"

    # if [ "$root_part" != "$NONE" ]
    # then
    #     # mkdir -p /mnt/boot
    #     mount "$root_part" /mnt
    #     echo $root_part
    # fi

    # if [ "$boot_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/boot
    #     mount "$boot_part" /mnt/boot
    # fi

    # if [ "$bootefi_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/boot/efi
    #     mount "$bootefi_part" /mnt/boot/efi
    # fi

    # if [ "$home_part" != "$NONE" ]
    # then
    #     mkdir /mnt/home
    #     mount "$home_part" /mnt/home
    # fi

    # if [ "$mnt_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/mnt/disk
    #     mount "$home_part" /mnt/mnt/disk
    # fi

    # if [ "$opt_part" != "$NONE" ]
    # then
    #     mkdir /mnt/opt
    #     mount "$opt_part" /mnt/opt
    # fi

    # if [ "$srv_part" != "$NONE" ]
    # then
    #     mkdir /mnt/srv
    #     mount "$srv_part" /mnt/srv
    # fi

    # if [ "$tmp_part" != "$NONE" ]
    # then
    #     mkdir /mnt/tmp
    #     mount "$tmp_part" /mnt/tmp
    # fi

    # if [ "$usr_part" != "$NONE" ]
    # then
    #     mkdir /mnt/usr
    #     mount "$usr_part" /mnt/usr
    # fi

    # if [ "$var_part" != "$NONE" ]
    # then
    #     mkdir /mnt/var
    #     mount "$var_part" /mnt/var
    # fi

    IFS=$OLDIFS

    kswpfsize
}


kswpfsize() {

    # FALSE "3072" FALSE "4096"
    swapsize=$(yad --width=400 --center --title="$TITLE" --text="$KSWP004" \
        --buttons-layout=center --image=preferences \
        --form  --item-separator="," --separator=" " \
        --field="$KSWP001":CB \
        "1024,2048,3072,4096")
    swaps=$(echo $swapsize | cut -d "|" -f2)

    if [ "$?" = "0" ]
    then
        swapfile="yes"
        # (echo "# $INS007"
        # touch /mnt/swapfile
        # dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swaps}
        # chmod 600 /mnt/swapfile
        # mkswap /mnt/swapfile
        # swapon /mnt/swapfile) | yad --progress --title="$TITLE" --width=450 --pulsate --auto-close --no-buttons
        #echo "swap k√©sz√≠t√©s"
        # egyeb_csatolas
    else
        kswp
    fi
}


kswpf() {

    # devices="$(lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u | sed "s/ disk//g" | awk '{print "false " $0}')"

    # device="$(yad  --width=400 --center \
    #     --buttons-layout=center --title="$TITLE" --text="$MAIN012" \
    #     --no-selection  --image=preferences --radiolist --list \
    #     --column="" --column="" $devices)"
    # dev="$(echo "$device" | cut -d "|" -f2)"
    # echo $dev

    # las=$(sudo fdisk -l | grep "$dev" | grep -v Disk | awk '{print $1}' | tr "\n" ",")
    # echo $las
    las=$(lsblk -lno NAME,SIZE,FSTYPE,TYPE | grep "part" | awk -F " " '{print "/dev/"$1 " " $2 " " $3}'| tr "\n" ";")

    # IFS=";"
    selpart=$(yad --width=400 --center --title="$TITLE" --text="" \
        --buttons-layout=center --image=preferences \
        --form  --item-separator=";" --separator=";" \
        --field="$MNT001":CB \
        --field="$MNT002":CB \
        --field="$MNT003":CB \
        --field="$MNT004":CB \
        --field="$MNT011":CB \
        --field="$MNT005":CB \
        --field="$MNT007":CB \
        --field="$MNT008":CB \
        --field="$MNT009":CB \
        --field="$MNT010":CB \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}")

    IFS=";"
    check_kswpf $selpart


}


check_kswpno() {

    IFS=";"
    echo $1 $2 $3 $4 $5 $6 $7 $8 $9

    rootszamlal=0
    bootszamlal=0
    bootefiszamlal=0
    homeszamlal=0
    mntszamlal=0
    optszamlal=0
    # swapszamlal=0
    srvszamlal=0
    tmpszamlal=0
    usrszamlal=0
    varszamlal=0
    nincsszamlal=0

    root_part=$(echo "$1" | cut -d " " -f1)
    boot_part=$(echo "$2" | cut -d " " -f1)
    bootefi_part=$(echo "$3" | cut -d " " -f1)
    home_part=$(echo "$4" | cut -d " " -f1)
    mnt_part=$(echo "$5" | cut -d " " -f1)
    opt_part=$(echo "$6" | cut -d " " -f1)
    # swap_part=$(echo "$6" | cut -d " " -f1)
    srv_part=$(echo "$7" | cut -d " " -f1)
    tmp_part=$(echo "$8" | cut -d " " -f1)
    usr_part=$(echo "$9" | cut -d " " -f1)
    var_part=$(echo "${10}" | cut -d " " -f1)

    echo "$root_part $boot_part $bootefi_part $home_part $opt_part $srv_part $tmp_part $usr_part $var_part"

    # Root csatol√°s nem lehet √ºres...
    if [ "$root_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR000"
        kswpno
        return 1
    # Ha swap part√≠ci√≥, ez se lehet √ºres...
    # elif [ "$swap_part" = "${NONE}" ]
    # then
    #     yad --image=error  --buttons-layout=center --text="$ERROR001"
    #     kswpnofile
    #     return 1
    elif [ "$SYSTEM" = "UEFI" -a "$bootefi_part" = "${NONE}" ]
    then
        yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR002"
        kswpno
        return 1
    fi

    # H√°nyszor szerepel a part√≠ci√≥
    #sas=($root_part $boot_part $bootefi_part $home_part  $opt_part $swap_part $srv_part $tmp_part $usr_part $var_part)
    for i in { $root_part $boot_part $bootefi_part $home_part $mnt_part $opt_part $srv_part $tmp_part $usr_part $var_part }
    do
        if [ "$i" = "$root_part" ]
        then
            ((rootszamlal++))
        fi

        if [ "$i" = "$boot_part" -a "$i" != "${NONE}" ]
        then
            ((bootszamlal++))
        fi

        if [ "$i" = "$bootefi_part" -a "$i" != "${NONE}" ]
        then
            ((bootefiszamlal++))
        fi

        if [ "$i" = "$home_part" -a "$i" != "${NONE}" ]
        then
            ((homeszamlal++))
        fi

        if [ "$i" = "$mnt_part" -a "$i" != "${NONE}" ]
        then
            ((mntszamlal++))
        fi

        if [ "$i" = "$opt_part" -a "$i" != "${NONE}" ]
        then
            ((optszamlal++))
        fi

        # if [ "$i" = "$swap_part" ]
        # then
        #     ((swapszamlal++))
        # fi

        if [ "$i" = "$srv_part" -a "$i" != "${NONE}" ]
        then
            ((srvszamlal++))
        fi

        if [ "$i" = "$tmp_part" -a "$i" != "${NONE}" ]
        then
            ((tmpszamlal++))
        fi

        if [ "$i" = "$usr_part" -a "$i" != "${NONE}" ]
        then
            ((usrszamlal++))
        fi

        if [ "$i" = "$var_part" -a "$i" != "${NONE}" ]
        then
            ((varszamlal++))
        fi

        if [ "$i" = "${NONE}" ]
        then
            ((nincsszamlal++))
        fi

    done

    echo $rootszamlal $bootszamlal $bootefiszamlal $homeszamlal $optszamlal $srvszamlal $tmpszamlal $usrszamlal $varszamlal $nincsszamlal

    # Check double selection
    if [ "$rootszamlal" -gt "1" -o "$bootszamlal" -gt "1" -o \
        "$bootefiszamlal" -gt "1" -o "$homeszamlal" -gt "1" -o \
        "$mntszamlal" -gt "1" -o "$optszamlal" -gt "1" -o \
        "$srvszamlal" -gt "1" -o "$tmpszamlal" -gt "1" -o \
        "$usrszamlal" -gt "1" -o "$varszamlal" -gt "1" ]
        then
            yad --image=error --title="$TITLE" --buttons-layout=center --text="$ERROR003"
            kswpno
            return 1
    fi

    partition_type="man_no_swap"

    # # Mount
    # mount "$root_part" /mnt

    # # mkdir -p /mnt/boot/efi
    # # mount "$bootefi_part" /mnt/boot/efi

    # # mkswap "$swap_part"
    # # swapon "$swap_part"

    # if [ "$boot_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/boot
    #     mount "$boot_part" /mnt/boot
    # fi

    # if [ "$bootefi_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/boot/efi
    #     mount "$bootefi_part" /mnt/boot/efi
    # fi

    # if [ "$home_part" != "$NONE" ]
    # then
    #     mkdir /mnt/home
    #     mount "$home_part" /mnt/home
    # fi

    # if [ "$mnt_part" != "$NONE" ]
    # then
    #     mkdir -p /mnt/mnt/disk
    #     mount "$home_part" /mnt/mnt/disk
    # fi

    # if [ "$opt_part" != "$NONE" ]
    # then
    #     mkdir /mnt/opt
    #     mount "$opt_part" /mnt/opt
    # fi

    # if [ "$srv_part" != "$NONE" ]
    # then
    #     mkdir /mnt/srv
    #     mount "$srv_part" /mnt/srv
    # fi

    # if [ "$tmp_part" != "$NONE" ]
    # then
    #     mkdir /mnt/tmp
    #     mount "$tmp_part" /mnt/tmp
    # fi

    # if [ "$usr_part" != "$NONE" ]
    # then
    #     mkdir /mnt/usr
    #     mount "$usr_part" /mnt/usr
    # fi

    # if [ "$var_part" != "$NONE" ]
    # then
    #     mkdir /mnt/var
    #     mount "$var_part" /mnt/var
    # fi

    IFS=$OLDIFS
}

kswpno() {

    # devices="$(lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u | sed "s/ disk//g" | awk '{print "false " $0}')"

    # device="$(yad  --width=400 --center \
    #     --buttons-layout=center --title="$TITLE" --text="$MAIN012" \
    #     --no-selection  --image=preferences --radiolist --list \
    #     --column="" --column="" $devices)"
    # dev="$(echo "$device" | cut -d "|" -f2)"
    # echo $dev

    # las=$(sudo fdisk -l | grep "$dev" | grep -v Disk | awk '{print $1}' | tr "\n" ",")
    # echo $las
    las=$(lsblk -lno NAME,SIZE,FSTYPE,TYPE | grep "part" | awk -F " " '{print "/dev/"$1 " " $2 " " $3}'| tr "\n" ";")

    selpart1=$(yad --width=400 --center --title="$TITLE" --text="" \
        --buttons-layout=center --image=preferences \
        --form  --item-separator=";" --separator=";" \
        --field="$MNT001":CB \
        --field="$MNT002":CB \
        --field="$MNT003":CB \
        --field="$MNT004":CB \
        --field="$MNT011":CB \
        --field="$MNT005":CB \
        --field="$MNT007":CB \
        --field="$MNT008":CB \
        --field="$MNT009":CB \
        --field="$MNT010":CB \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" "^${NONE};${las:0:-1}" \
        "^${NONE};${las:0:-1}")

    IFS=";"
    check_kswpno $selpart1

}

partition_set() {

    partition="$(yad  --width=400 --center \
        --buttons-layout=center --title="$TITLE" --text="$MAIN012" \
        --no-selection  --image=preferences --radiolist --list --no-headers \
        --column="" --column="" "${PART_LIST[@]}")"


    unset MAIN_LIST

    MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "true" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
        "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
        "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")

    if [ "$(echo "$partition" | cut -d "|" -f2)" = "$PART000" ]
    then
        auto_part
    elif [ "$(echo "$partition" | cut -d "|" -f2)" = "$PART001" ]
    then
        man_part
    fi
}


install_summary() {

    lan=$(echo $sys_lang | cut -d '|' -f1)
    kbl=$(echo $kb_set | cut -d '|' -f1)
    kbm=$(echo $kb_set | cut -d '|' -f2)
    tzz=$(echo $tzzone_set | cut -d '|' -f1)
    tzsz=$(echo $tzszone_set | cut -d '|' -f1)
    tim=$(echo $clock | cut -d '|' -f1)
    hsnm=$(echo $hsname)
    kern=$(echo $ker_sh_cup | cut -d '|' -f1)
    shel_l=$(echo $ker_sh_cup | cut -d '|' -f2)
    cup_s=$(echo $ker_sh_cup | cut -d '|' -f3)
    samba_s=$(echo $ker_sh_cup | cut -d '|' -f4)
    grc=$(echo $grap | cut -d '|' -f1)
    dm_set=$(echo $dm_des | cut -d '|' -f1)
    de_set=$(echo $dm_des | cut -d '|' -f2)


    boot_sel=$(echo $bootloader | cut -d '|' -f2)
    grb_dev=$(echo $grb_set | cut -d '|' -f2)

    unset MAIN_LIST



    if [ "$boot_sel" = "grub" ]
    then
        # boot_sel=$(echo $bootloader | cut -d '|' -f2)
        # grb_dev=$(echo $grb_set | cut -d '|' -f2)

        boot_load="${BTL000}:  $boot_sel\n\t${BTL001}:  $grb_dev"
    else
        boot_load="${BTL000}:  $boot_sel"
    fi


    ins_sum="$(yad --width=400 --height=600 --center --title="$TITLE" --text="$MAIN015" \
        --buttons-layout=center --image=input-gaming \
        --form  --scroll \
        --field "$MAIN002\n\t${LAN}:  $lan\n\n\
$MAIN003\n\t${KBL}:  $kbl\n\t${KBM}:  $kbm\n\n\
$MAIN004\n\t${TZZ}:  $tzz\n\t${TZSZ}: $tzsz\n\t${TIM}:  $tim\n\n\
$MAIN005\n\t${HSNM1}:  $hsnm\n\n\
${URSET001}:  $user_name\n\n\
$MAIN007\n\t${KSC001}:  $kern\n\t${KSC002}:  $shel_l\n\t${KSC003}:  $cup_s\n\t${KSC004}:  $samba_s\n\n\
$MAIN008\n\t${GRC001}:  $grc\n\n\
$MAIN009\n\t${DMDE001}:  $dm_set\n\t${DMDE002}:  $de_set\n\n\
$MAIN011\n\t$boot_load\n":LBL )"
    ans_sum="$?"
    echo $ans_sum

    if [ "$ans_sum" = "1" ]
    then
        unset MAIN_LIST
        # boot_sel=$(echo $bootloader | cut -d '|' -f2)
        MAIN_LIST=("false" "$MAIN001" "false" "$MAIN012" "false" "$MAIN002" "false" "$MAIN003" "false" "$MAIN004" \
            "false" "$MAIN006" "false" "$MAIN007" "false" "$MAIN008" \
            "false" "$MAIN009" "false" "$MAIN011" "false" "$MAIN013")
        main
    else
        install_run
    fi
}

install_run() {

    # Start partitions and mount

    (
    if [ "$partition_type" = "auto_bios" ]
    then
        echo "# $CRBIOS"
        dd if=/dev/zero of="$dev" bs=512 count=1
        Parted "mklabel msdos"
        Parted "mkpart primary ext4 1MiB 100%"
        Parted "set 1 boot on"
        mkfs.ext4 -F "$root_part"
        mount "$root_part" /mnt
        touch /mnt/swapfile
        dd if=/dev/zero of=/mnt/swapfile bs=1M count="${swap_space}"
        chmod 600 /mnt/swapfile
        mkswap /mnt/swapfile
        swapon /mnt/swapfile
        swapfile="yes"
    fi

    if [ "$partition_type" = "auto_uefi" ]
    then
        echo "# $CRUEFI"
        dd if=/dev/zero of="$dev" bs=512 count=1
        Parted "mklabel gpt"
        Parted "mkpart primary fat32 1MiB 513MiB"
        Parted "mkpart primary ext4 513MiB 100%"
        Parted "set 1 boot on"
        mkfs.fat -F32 "$gpt_part"
        mkfs.ext4 -F "$root_part"
        mount "$root_part" /mnt
        mkdir -p /mnt/boot/efi
        mount "$gpt_part" /mnt/boot/efi
        touch /mnt/swapfile
        dd if=/dev/zero of=/mnt/swapfile bs=1M count="${swap_space}"
        chmod 600 /mnt/swapfile
        mkswap /mnt/swapfile
        swapon /mnt/swapfile
        swapfile="yes"
    fi

    if [ "$partition_type" = "man_swap_part" ]
    then

        echo "# $MAIN012"
        # Mount
        mount "$root_part" /mnt

        mkswap "$swap_part"
        swapon "$swap_part"

        if [ "$boot_part" != "$NONE" ]
        then
            mkdir /mnt/boot/
            mount "$boot_part" /mnt/boot
        fi

        if [ "$bootefi_part" != "$NONE" ]
        then
            mkdir -p /mnt/boot/efi
            mount "$bootefi_part" /mnt/boot/efi
        fi

        if [ "$home_part" != "$NONE" ]
        then
            mkdir /mnt/home
            mount "$home_part" /mnt/home
        fi

        if [ "$mnt_part" != "$NONE" ]
        then
            mkdir -p /mnt/mnt/disk
            mount "$mnt_part" /mnt/mnt/disk
        fi

        if [ "$opt_part" != "$NONE" ]
        then
            mkdir /mnt/opt
            mount "$opt_part" /mnt/opt
        fi

        if [ "$srv_part" != "$NONE" ]
        then
            mkdir /mnt/srv
            mount "$srv_part" /mnt/srv
        fi

        if [ "$tmp_part" != "$NONE" ]
        then
            mkdir /mnt/tmp
            mount "$tmp_part" /mnt/tmp
        fi

        if [ "$usr_part" != "$NONE" ]
        then
            mkdir /mnt/usr
            mount "$usr_part" /mnt/usr
        fi

        if [ "$var_part" != "$NONE" ]
        then
            mkdir /mnt/var
            mount "$var_part" /mnt/var
        fi
    fi

    if [ "$partition_type" = "man_swap_file" ]
    then

        echo "# $MAIN012"

        if [ "$root_part" != "$NONE" ]
        then
            # mkdir -p /mnt/boot
            mount "$root_part" /mnt
            echo $root_part
        fi

        if [ "$boot_part" != "$NONE" ]
        then
            mkdir -p /mnt/boot
            mount "$boot_part" /mnt/boot
        fi

        if [ "$bootefi_part" != "$NONE" ]
        then
            mkdir -p /mnt/boot/efi
            mount "$bootefi_part" /mnt/boot/efi
        fi

        if [ "$home_part" != "$NONE" ]
        then
            mkdir /mnt/home
            mount "$home_part" /mnt/home
        fi

        if [ "$mnt_part" != "$NONE" ]
        then
            mkdir -p /mnt/mnt/disk
            mount "$home_part" /mnt/mnt/disk
        fi

        if [ "$opt_part" != "$NONE" ]
        then
            mkdir /mnt/opt
            mount "$opt_part" /mnt/opt
        fi

        if [ "$srv_part" != "$NONE" ]
        then
            mkdir /mnt/srv
            mount "$srv_part" /mnt/srv
        fi

        if [ "$tmp_part" != "$NONE" ]
        then
            mkdir /mnt/tmp
            mount "$tmp_part" /mnt/tmp
        fi

        if [ "$usr_part" != "$NONE" ]
        then
            mkdir /mnt/usr
            mount "$usr_part" /mnt/usr
        fi

        if [ "$var_part" != "$NONE" ]
        then
            mkdir /mnt/var
            mount "$var_part" /mnt/var
        fi

        # echo "# $INS007"
        touch /mnt/swapfile
        dd if=/dev/zero of=/mnt/swapfile bs=1M count=${swaps}
        chmod 600 /mnt/swapfile
        mkswap /mnt/swapfile
        swapon /mnt/swapfile
    fi

    if [ "$partition_type" = "man_no_swap" ]
    then

        echo "# $MAIN012"

        # Mount
        mount "$root_part" /mnt

        if [ "$boot_part" != "$NONE" ]
        then
            mkdir -p /mnt/boot
            mount "$boot_part" /mnt/boot
        fi

        if [ "$bootefi_part" != "$NONE" ]
        then
            mkdir -p /mnt/boot/efi
            mount "$bootefi_part" /mnt/boot/efi
        fi

        if [ "$home_part" != "$NONE" ]
        then
            mkdir /mnt/home
            mount "$home_part" /mnt/home
        fi

        if [ "$mnt_part" != "$NONE" ]
        then
            mkdir -p /mnt/mnt/disk
            mount "$home_part" /mnt/mnt/disk
        fi

        if [ "$opt_part" != "$NONE" ]
        then
            mkdir /mnt/opt
            mount "$opt_part" /mnt/opt
        fi

        if [ "$srv_part" != "$NONE" ]
        then
            mkdir /mnt/srv
            mount "$srv_part" /mnt/srv
        fi

        if [ "$tmp_part" != "$NONE" ]
        then
            mkdir /mnt/tmp
            mount "$tmp_part" /mnt/tmp
        fi

        if [ "$usr_part" != "$NONE" ]
        then
            mkdir /mnt/usr
            mount "$usr_part" /mnt/usr
        fi

        if [ "$var_part" != "$NONE" ]
        then
            mkdir /mnt/var
            mount "$var_part" /mnt/var
        fi
    fi


    echo "# $INS000"
    #reflector --verbose -l 4 -p https --sort rate --save /etc/pacman.d/mirrorlist
    reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist

    echo "10"

    # miro=$(curl -s "https://www.archlinux.org/mirrorlist/?country="${KEYBOARD_LAYOUT^^}"&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' )
    # echo "$miro" > miro.txt
    # cp miro.txt /etc/pacman.d/mirrorlist

    # pacman -Syy

    echo "# $INS009"
    if [ "$kern" = "linux" ]
    then
        pacstrap /mnt base base-devel linux linux-firmware git
        echo "end base"
    elif [ "$kern" = "linux-lts" ]
    then
        pacstrap /mnt  base base-devel linux-lts linux-firmware git
    fi

    # Added repo.

    cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
    echo "" >> /mnt/etc/pacman.conf;echo "[multilib]" >> /mnt/etc/pacman.conf;echo "Include = /etc/pacman.d/mirrorlist" >> /mnt/etc/pacman.conf
    echo "" >> /mnt/etc/pacman.conf;echo "[magyarch_repo]" >> /mnt/etc/pacman.conf;echo "SigLevel = Optional TrustedOnly" >> /mnt/etc/pacman.conf;echo 'Server = https://magyarch.github.io/$repo/$arch' >> /mnt/etc/pacman.conf

    arch_chroot "pacman -Syy"

    if [ "$de_set" = "awesome (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-awesome.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-awesome.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"
    fi

    if [ "$de_set" = "bspwm (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/baz-bspwm.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/baz-bspwm.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"
    fi

    if [ "$de_set" = "dwm (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-dwm.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-dwm.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"

    fi

    if [ "$de_set" = "herbstluftwm (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-hlwm.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-hlwm.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"
    fi

    if [ "$de_set" = "i3 (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-i3.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-i3.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"
    fi

    if [ "$de_set" = "i3+polybar (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-i3-polybar.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-i3-polybar.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"
    fi

    if [ "$de_set" = "spectrwm (MagyArch)" ]
    then
        arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        if [ "$VERSION" = "Test" ]
        then
            arch_chroot "git clone https://github.com/bazeeel/magyarch-spectrwm.git /mnt/mnt/etc/skel/"
        else
            arch_chroot "git clone -b $VERSION https://github.com/bazeeel/magyarch-spectrwm.git /mnt/mnt/etc/skel/"
        fi
        arch_chroot "cp -rfT /mnt/mnt/etc/skel/ /etc/skel/"

    fi

    if [ "$de_set" = "xfce4 (MagyArch)" ]
    then
        # arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        # git clone https://github.com/magyarchlinux/magyarch_xfce4.git
        # cp -rf magyarch_xfce4/.config/ /mnt/etc/skel/
        arch_chroot "pacman -S --noconfirm --need magyarch-xfce4 nano discord sublime-text-4"
    fi

    if [ "$de_set" = "qtile (MagyArch)" ]
    then
        # arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        echo "qtile"
        if [ "$VERSION" = "Test" ]
        then
            git clone https://github.com/magyarchlinux/magyarch-qtile.git
        else
            git clone -b $VERSION https://github.com/magyarchlinux/magyarch-qtile.git
        fi
        cp -rfT magyarch-qtile/ /mnt/etc/skel/
    fi

    if [ "$de_set" = "xmonad (MagyArch)" ]
    then
        # arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        echo "qtile"
        if [ "$VERSION" = "Test" ]
        then
            git clone https://github.com/bazeeel/magyarch-xmonad.git
        else
            git clone -b $VERSION https://github.com/bazeeel/magyarch-xmonad.git
        fi
        cp -rfT magyarch-xmonad/ /mnt/etc/skel/
    fi

    if [ "$de_set" = "xmonad+polybar (MagyArch)" ]
    then
        # arch_chroot "mkdir -p /mnt/mnt/etc/skel"
        echo "qtile"
        if [ "$VERSION" = "Test" ]
        then
            git clone https://github.com/bazeeel/magyarch-xmonad-polybar.git
        else
            git clone -b $VERSION https://github.com/bazeeel/magyarch-xmonad-polybar.git
        fi
        cp -rfT magyarch-xmonad-polybar/ /mnt/etc/skel/
    fi

    echo "30"

    echo "# $INS001"
    genfstab -t PARTUUID -p /mnt >> /mnt/etc/fstab
    if grep -q "/mnt/swapfile" "/mnt/etc/fstab"; then
    sed -i '/swapfile/d' /mnt/etc/fstab
    echo "/swapfile     none    swap    defaults    0   0" >> /mnt/etc/fstab
    fi

    # cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
    # echo "" >> /mnt/etc/pacman.conf;echo "[multilib]" >> /mnt/etc/pacman.conf;echo "Include = /etc/pacman.d/mirrorlist" >> /mnt/etc/pacman.conf
    # echo "" >> /mnt/etc/pacman.conf;echo "[magyarch_repo]" >> /mnt/etc/pacman.conf;echo "SigLevel = Optional TrustedOnly" >> /mnt/etc/pacman.conf;echo 'Server = https://magyarchlinux.github.io/$repo/$arch' >> /mnt/etc/pacman.conf

    # arch_chroot "pacman -Syy"

    echo "# $INS002"
    touch .passwd
    echo -e "$rootpass1\n$rootpass2" > .passwd
    arch_chroot "passwd root" < .passwd >/dev/null
    rm .passwd


    arch_chroot "useradd -m -g users -G adm,lp,wheel,power,audio,video -s /bin/bash $user_name"
    touch .passwd
    echo -e "$userpass1\n$userpass2" > .passwd
    arch_chroot "passwd $user_name" < .passwd >/dev/null
    rm .passwd

    echo "# $INS003"
    echo "LANG=\"${lan}\"" > /mnt/etc/locale.conf
    echo "LC_ADDRESS=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_IDENTIFICATION=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_MEASUREMENT=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_MONETARY=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_NAME=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_NUMERIC=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_PAPER=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_TELEPHONE=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "LC_TIME=\"${lan}\"" >> /mnt/etc/locale.conf
    echo "${lan} UTF-8" >> /mnt/etc/locale.gen
    echo "en_US.UTF-8 UTF-8" >> /mnt/etc/locale.gen
    arch_chroot "locale-gen"
    export LANG=${lan}

    echo "50"

    mkdir -p /mnt/etc/X11/xorg.conf.d/
    echo -e 'Section "InputClass"\n\tIdentifier "system-keyboard"\n\tMatchIsKeyboard "on"\n\tOption "XkbLayout" "'$kbl'"\n\tOption "XkbModel" "'$kbm'"\n\tOption "XkbVariant" ",''"\n\tOption "XkbOptions" "grp:alt_shift_toggle"\nEndSection' > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
    echo "KEYMAP=\"${kbl}\""  > /mnt/etc/vconsole.conf

    echo "# $INS004"
    # arch_chroot "rm /etc/localtime"
    arch_chroot "ln -s /usr/share/zoneinfo/${tzz}/${tzsz} /etc/localtime"

    arch_chroot "hwclock --systohc --${tim}"

    arch_chroot "timedatectl set-ntp true"

    arch_chroot "echo ${hsnm} > /etc/hostname"

    echo "%wheel ALL=(ALL) ALL" | tee /mnt/etc/sudoers.d/g_wheel

    # cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
    # arch_chroot "pacman -Syy"

    echo "# $INS005"
    arch_chroot "pacman -S --noconfirm --needed \
        acpi alsa-utils apg b43-fwcutter conky-lua-archers cowsay ddrescue gvfs gvfs-mtp jq lsb-release man-db mc neofetch \
        networkmanager nerd-fonts-jetbrains-mono network-manager-applet nm-connection-editor pulseaudio pulseaudio-alsa \
        python-ueberzug python-psutil python-requests xdg-user-dirs xdg-utils xf86-input-libinput xf86-input-synaptics xf86-video-fbdev \
        xorg-apps xorg-server xorg-twm xorg-xinit xterm wget"

    cp /installer/lsb-release /mnt/etc/

    # aur_hlp="cd /home/${user_name} ; su ${user_name} -c 'git clone https://aur.archlinux.org/yay-bin' ; cd yay-bin ; su ${user_name} -c 'makepkg' ; pacman -U yay-bin*x86_64* --noconfirm ; cd .. ; rm -rf yay-bin"

    # arch_chroot "cd /home/${user_name} ; su ${user_name} -c 'git clone https://aur.archlinux.org/yay-bin' ; cd yay-bin ; su ${user_name} -c 'makepkg' ; pacman -U yay-bin*x86_64* --noconfirm ; cd .. ; rm -rf yay-bin"
    arch_chroot "pacman -S paru-bin bat vifm tdrop-git --needed --noconfirm"
    arch_chroot "sed -i 's/#BottomUp/BottomUp/' /etc/paru.conf"
    arch_chroot "sed -i 's|BottomUp|& \nSkipReview|' /etc/paru.conf"
    arch_chroot "sed -i 's/#Color/Color/' /etc/pacman.conf"

    processor=$(lspci -n | awk -F " " '{print $2 $3}' | grep ^"06" | awk -F ":" '{print $2}' | sed -n  '1p')

    if [ "$processor" = "8086" ]
    then
        pacstrap /mnt intel-ucode
    elif [ "$processor" = "1022" ]
    then
        pacstrap /mnt amd-ucode
    fi

    echo "# $INS006"

    if [ "$kern" = "linux" -a "$grc" = "virtualbox" ]
    then
        arch_chroot "pacman -S --noconfirm --needed virtualbox-guest-dkms virtualbox-guest-utils linux-headers "
        echo -e "vboxguest\nvboxsf\nvboxvideo" > /mnt/etc/modules-load.d/virtualbox.conf
    elif [ "$kern" = "linux-lts" -a "$grc" = "virtualbox" ]
    then
        arch_chroot "pacman -S --noconfirm --needed virtualbox-guest-dkms virtualbox-guest-utils linux-lts-headers"
        echo -e "vboxguest\nvboxsf\nvboxvideo" > /mnt/etc/modules-load.d/virtualbox.conf
    elif [ "$grc" = "i915" ]
    then
        # pacstrap /mnt xf86-video-intel libva-intel-driver lib32-mesa
        arch_chroot "pacman -S --noconfirm --needed xf86-video-intel libva-intel-driver lib32-mesa"
        # echo "options i915 modeset=1\n" > /mnt/etc/modprobe.d/i915.conf

    elif [ "$grc" = "amdgpu" ]
    then
        # pacstrap /mnt xf86-video-amdgpu vulkan-radeon libva-mesa-driver lib32-mesa lib32-libva-mesa-driver
        arch_chroot "pacman -S --noconfirm --needed xf86-video-amdgpu vulkan-radeon libva-mesa-driver lib32-mesa lib32-libva-mesa-driver mesa-vdpau"

    elif [ "$kern" = "linux" -a "$grc" = "nvidia" ]
    then
        arch_chroot "pacman -S --noconfirm --needed nvidia libvdpau lib32-nvidia-utils lib32-libvdpau"

    elif [ "$kern" = "linux-lts" -a "$grc" = "nvidia" ]
    then
        arch_chroot "pacman -S --noconfirm --needed nvidia-lts libvdpau lib32-nvidia-utils lib32-libvdpau"

    elif [ "$grc" = "nouveau" ]
    then
        arch_chroot "pacman -S --noconfirm --needed xf86-video-nouveau mesa lib32-mesa"
        # echo "options nouveau modeset=1\n" > /mnt/etc/modprobe.d/blacklist-nvidia.conf

    fi

    echo "70"

    if [ "$cup_s" = "$YES" ]
    then
        arch_chroot "pacman -S --needed --noconfirm ghostscript gsfonts system-config-printer gtk3-print-backends cups cups-pdf cups-filters gutenprint"
        arch_chroot "systemctl enable org.cups.cupsd.service"
        arch_chroot "systemctl enable cups.service"
        arch_chroot "systemctl start cups.service"
    fi

    if [ "$samba_s" = "$YES" ]
    then
        arch_chroot "pacman -S avahi gvfs-smb --noconfirm --needed"
        arch_chroot "systemctl enable avahi-daemon.service"
    fi

    if [ "$dm_set"  = "$DEFAULT" ]
    then
        if [ "$de_set" = "gnome" ]
        then
            arch_chroot "systemctl enable gdm.service"
        elif [ "$de_set" = "budgie-desktop" ]
        then
            arch_chroot "pacman -S --noconfirm --needed lightdm lightdm-gtk-greeter-settings lightdm-gtk-greeter gnome-control-center gnome-backgrounds "
            arch_chroot "systemctl enable lightdm.service"
        elif [ "$de_set" = "lxde" ]
        then
            arch_chroot "pacman -S --noconfirm --needed lxdm "
            arch_chroot "systemctl enable lxdm.service"
        elif [ "$de_set" = "plasma" ]
        then
            arch_chroot "pacman -S --noconfirm --needed sddm "
            arch_chroot "systemctl enable sddm.service"
        else

            arch_chroot "pacman -S --noconfirm --needed magyarch-lightdm"
            arch_chroot "systemctl enable lightdm.service"
            # arch_chroot "pacman -S --noconfirm --needed lightdm lightdm-gtk-greeter-settings lightdm-gtk-greeter "
            # arch_chroot "systemctl enable lightdm.service"
            # git clone https://github.com/magyarchlinux/magyarch_xfce4.git
            # mkdir -p /mnt/usr/share/backgrounds
            # cp -rf magyarch_xfce4/usr/share/backgrounds/magyarch/ /mnt/usr/share/backgrounds/
            # cp -rf magyarch_xfce4/usr/share/icons/braincolor-green /mnt/usr/share/icons/
            # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-dark /mnt/usr/share/themes/
            # cp -rf magyarch_xfce4/etc/lightdm/lightdm-gtk-greeter.conf /mnt/etc/lightdm/
            # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-braincolor /mnt/usr/share/themes/""

        fi

    elif [ "$dm_set" = "lightdm" ]
    then
        # arch_chroot "pacman -S --noconfirm --needed lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings "
        arch_chroot "pacman -S --noconfirm --needed magyarch-lightdm"
        arch_chroot "systemctl enable lightdm.service"
        # git clone https://github.com/magyarchlinux/magyarch_xfce4.git
        # mkdir -p /mnt/usr/share/backgrounds
        # cp -rf magyarch_xfce4/usr/share/backgrounds/magyarch/ /mnt/usr/share/backgrounds/
        # # cp -rf magyarch_xfce4/usr/share/icons/braincolor-green /mnt/usr/share/icons/
        # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-dark /mnt/usr/share/themes/
        # cp -rf magyarch_xfce4/etc/lightdm/lightdm-gtk-greeter.conf /mnt/etc/lightdm/
        # # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-braincolor /mnt/usr/share/themes/""
    else
        arch_chroot "pacman -S --noconfirm --needed $dm_set "
        arch_chroot "systemctl enable ${dm_set}.service"
    fi

    arch_chroot "systemctl enable NetworkManager"



    if [ "$de_set" = "gnome" ]
    then
        arch_chroot "pacman -S --noconfirm --needed gnome gnome-extra "
    elif [ "$de_set" = "plasma" ]
    then
        arch_chroot "pacman -S --noconfirm --needed plasma kde-applications "

    elif [ "$de_set" = "xfce4" ]
    then
        arch_chroot "pacman -S --noconfirm --needed xfce4 xfce4-goodies "


    elif [ "$de_set" = "awesome" ]
    then
        arch_chroot "pacman -S --noconfirm --needed awesome"

    elif [ "$de_set" = "awesome (MagyArch)" ]
    then

        arch_chroot "pacman -S --noconfirm --needed \
            alacritty arandr atool awesome bc firefox calcurse discord dmenu2 docx2txt dosfstools dunst \
            ed exfat-utils expac feh ffmpeg firefox fzf gnome-keyring highlight htop imagemagick libnotify \
            lxappearance maim mediainfo mpc mpd mpv ncmpcpp neofetch neovim networkmanager newsboat ntfs-3g \
            odt2txt pavucontrol pcmanfm picom polkit-gnome polybar pulseaudio pulseaudio-alsa \
            pulseaudio-equalizer-ladspa pulsemixer rofi rxvt-unicode rxvt-unicode scrot socat \
            sublime-text-4 sutils-git sxhkd sxhkd sxiv task-spooler tree ttf-bitstream-vera ttf-dejavu \
            ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unclutter unrar unzip \
            urlscan urxvt-perls vicious vifm w3m wmctrl xcape xclip xdo xdo xdotool xorg-server \
            xorg-xbacklight xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo xtitle-git \
            xwallpaper youtube-dl zathura zathura-djvu zathura-pdf-poppler zathura-ps"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "xfce4 (MagyArch)" ]
    then
        arch_chroot "pacman -S --noconfirm --needed magyarch-xfce4"
        # cp -rf magyarch_xfce4/usr/share/backgrounds/magyarch/ /mnt/usr/share/backgrounds/
        # cp -rf magyarch_xfce4/usr/share/icons/braincolor-green /mnt/usr/share/icons/
        # cp -rf magyarch_xfce4/usr/share/icons/magyarchfinal_32_pix.png /mnt/usr/share/icons/
        # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-dark /mnt/usr/share/themes/
        # cp -rf magyarch_xfce4/etc/lightdm/lightdm-gtk-greeter.conf /mnt/etc/lightdm/
        # cp -rf magyarch_xfce4/usr/share/themes/MagyArch-braincolor /mnt/usr/share/themes/""

        # arch_chroot "rm -rf /mnt/mnt"

    elif [ "$de_set" = "mate" ]
    then
        arch_chroot "pacman -S --noconfirm --needed mate mate-extra "

    elif [ "$de_set" = "bspwm" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed  bspwm sxhkd xdo rxvt-unicode scrot"
        arch_chroot "su ${user_name} -c 'mkdir -p /home/$user_name/.config/{bspwm,sxhkd}'"
        arch_chroot "su ${user_name} -c 'cp /usr/share/doc/bspwm/examples/bspwmrc /home/$user_name/.config/bspwm/'"
        arch_chroot "su ${user_name} -c 'cp /usr/share/doc/bspwm/examples/sxhkdrc /home/$user_name/.config/sxhkd/'"

    elif [ "$de_set" = "bspwm (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty arandr atool bc firefox bspwm calcurse discord dmenu2 docx2txt dosfstools dunst ed \
            exfat-utils expac feh ffmpeg firefox fzf gnome-keyring highlight htop imagemagick libnotify \
            lxappearance maim mediainfo mpc mpd mpv ncmpcpp neofetch neovim networkmanager newsboat \
            ntfs-3g odt2txt pavucontrol pcmanfm picom polkit-gnome polybar pulseaudio pulseaudio-alsa \
            pulseaudio-equalizer-ladspa pulsemixer rofi rxvt-unicode rxvt-unicode scrot socat \
            sublime-text-4 sutils-git sxhkd sxhkd sxiv task-spooler tree ttf-bitstream-vera ttf-dejavu \
            ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unclutter unrar unzip \
            urlscan urxvt-perls vifm w3m wmctrl xcape xclip xdo xdo xdotool xorg-server xorg-xbacklight \
            xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo xtitle-git xwallpaper youtube-dl \
            zathura zathura-djvu zathura-pdf-poppler zathura-ps"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "dwm (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty arandr atool bc firefox calcurse discord dmenu2 docx2txt dosfstools dunst ed exfat-utils expac \
            feh ffmpeg firefox fzf gnome-keyring highlight htop imagemagick libnotify lxappearance maim mediainfo mpc mpd \
            mpv ncmpcpp neofetch neovim networkmanager newsboat ntfs-3g odt2txt pavucontrol pcmanfm picom polkit-gnome \
            pulseaudio pulseaudio-alsa pulseaudio-equalizer-ladspa pulsemixer rofi rofi-greenclip rxvt-unicode rxvt-unicode scrot \
            socat sublime-text-4 surfraw sutils-git sxhkd sxhkd sxiv task-spooler tree ttf-bitstream-vera ttf-dejavu \
            ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unclutter unrar unzip urlscan \
            urxvt-perls vifm w3m wmctrl xcape xclip xdo xdo xdotool xorg-server xorg-xbacklight xorg-xdpyinfo xorg-xinit \
            xorg-xprop xorg-xsetroot xorg-xwininfo xtitle-git xwallpaper youtube-dl zathura zathura-djvu \
            zathura-pdf-poppler zathura-ps"

        arch_chroot "cd /mnt/mnt/etc/skel/.config/suckless/dwm && make && make clean install"
        arch_chroot "cd /mnt/mnt/etc/skel/.config/suckless/slstatus && make && make clean install"
        # arch_chroot "cd /mnt/mnt/etc/skel/.config/suckless/st && make && make clean install"
        mkdir -p /mnt/usr/share/xsessions
        echo -e "[Desktop Entry]\nName=DWM (MagyArch)\nComment=DWM Session\nExec=/usr/local/bin/dwm\nType=Application\nKeywords=wm;tiling" > /mnt/usr/share/xsessions/mal_dwm.desktop
        arch_chroot "LANG=C ; yes | pacman -S libxft-bgra "
        arch_chroot "pacman -S --noconfirm --needed mst"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "dwm" ]
    then
        arch_chroot "pacman -S --noconfirm --needed dwm st libx11 libxinerama libxft freetype2 dmenu"

    elif [ "$de_set" = "spectrwm (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty firefox discord dmenu2 dunst expac expac feh figlet firefox htop lolcat \
            lxappearance magyarch_xmenu maim mpd mpv ncmpcpp neofetch neovim newsboat pavucontrol pcmanfm picom polkit-gnome \
            rofi rxvt-unicode scrot spectrwm-git sublime-text-4 sxhkd sxiv sxiv terminus-font \
            ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels unclutter unrar unzip urxvt-perls vifm \
            wmctrl xwallpaper xwallpaper zathura zathura-djvu zathura-pdf-poppler"

        arch_chroot "LANG=C ; yes | pacman -S libxft-bgra "
        arch_chroot "git clone https://github.com/bazeeel/st.git /mnt/mnt/st; cd /mnt/mnt/st; make clean install"
        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "i3 (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "

        arch_chroot "pacman -S --noconfirm --needed \
            alacritty firefox calcurse discord dmenu dosfstools dunst ed exfat-utils expac feh \
            ffmpeg fzf gnome-keyring highlight htop i3blocks i3-gaps imagemagick jq libnotify lxappearance \
            maim mediainfo mpc mpd mpv ncmpcpp neofetch neovim networkmanager ntfs-3g pavucontrol \
            pcmanfm picom polkit-gnome poppler pulseaudio pulseaudio-alsa pulseaudio-equalizer-ladspa \
            pulsemixer python-i3ipc rofi rxvt-unicode scrot socat sublime-text-4 sxhkd sxiv tree ttf-bitstream-vera \
            ttf-dejavu  ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unclutter \
            unrar unzip urlscan urxvt-perls vifm w3m wmctrl xcape xclip xdo xdotool xorg-server xorg-xbacklight \
            xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo xwallpaper youtube-dl zathura zathura-pdf-mupdf"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "i3+polybar (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "

        arch_chroot "pacman -S --noconfirm --needed \
            alacritty firefox calcurse discord dmenu dosfstools dunst ed exfat-utils expac feh \
            ffmpeg fzf gnome-keyring highlight htop i3blocks i3-gaps imagemagick jq libnotify lxappearance \
            maim mediainfo mpc mpd mpv ncmpcpp neofetch neovim networkmanager ntfs-3g pavucontrol \
            pcmanfm picom polkit-gnome poppler polybar pulseaudio pulseaudio-alsa pulseaudio-equalizer-ladspa \
            pulsemixer python-i3ipc rofi rxvt-unicode scrot socat sublime-text-4 sxhkd sxiv tree ttf-bitstream-vera \
            ttf-dejavu  ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unclutter \
            unrar unzip urlscan urxvt-perls vifm w3m wmctrl xcape xclip xdo xdotool xorg-server xorg-xbacklight \
            xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo xwallpaper youtube-dl zathura zathura-pdf-mupdf"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "spectrwm" ]
    then
        arch_chroot "pacman -S --noconfirm --needed spectrwm scrot xlockmore terminus-font"
        echo "bar_font = Terminus:pixelsize=14:antialias=true" >> /mnt/etc/spectrwm.conf

    elif [ "$de_set" = "qtile (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty atool firefox calcurse cava discord dmenu docx2txt dosfstools dunst exfat-utils expac feh \
            ffmpeg fzf gnome-keyring gtop highlight htop imagemagick libnotify lxappearance maim maim mediainfo mpc \
            mpd mpv ncmpcpp neofetch neovim neovim networkmanager network-manager-applet newsboat odt2txt pavucontrol \
            pcmanfm picom-tryone-git polkit-gnome pulseaudio pulseaudio-alsa pulsemixer python-mpd2 python-psutil python-requests \
            python-setuptools python-xlib qtile rofi rxvt-unicode rxvt-unicode scrot sublime-text-4 sxiv tree ttf-bitstream-vera \
            ttf-dejavu ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels ttf-linux-libertine unrar unzip urxvt-perls \
            vifm vifm w3m wmctrl xcape xcb-util-cursor xclip xorg-server xorg-xbacklight xorg-xdpyinfo xorg-xinit xorg-xprop \
            xorg-xsetroot xorg-xwininfo zathura zathura-djvu zathura-pdf-poppler zathura-ps"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "

    elif [ "$de_set" = "herbstluftwm" ]
    then
        arch_chroot "pacman -S --noconfirm --needed herbstluftwm xorg-xsetroot dzen2 dmenu"

    elif [ "$de_set" = "herbstluftwm (MagyArch)" ]
    then
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty atool firefox calcurse discord dmenu2 dzen2 expac herbstluftwm lf-bin maim mpc mpd mpv ncmpcpp \
            neofetch neovim newsboat pavucontrol pcmanfm picom polkit-gnome polybar rofi rxvt-unicode sublime-text-4 sxhkd \
            sxiv ttf-font-awesome-4 ttf-jetbrains-mono ttf-joypixels unrar unzip urxvt-perls vifm vim wmctrl wmctrl xcape \
            xclip xdo xorg-xsetroot xwallpaper zathura zathura-pdf-poppler"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "
        arch_chroot "sed -i 's/Exec=herbstluftwm/Exec=herbstluftwm --locked/' /usr/share/xsessions/herbstluftwm.desktop"

    elif [ "$de_set" = "xmonad (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty arandr firefox calcurse discord dmenu2 docx2txt dosfstools dunst ed exfat-utils expac feh \
            ffmpeg firefox fzf gnome-keyring highlight htop imagemagick jgmenu libnotify lxappearance magyarch_xmonad_pacman_hook maim mediainfo mpc mpd mpv \
            ncmpcpp neofetch neovim networkmanager newsboat ntfs-3g odt2txt pavucontrol pcmanfm picom polkit-gnome pulseaudio \
            pulseaudio-alsa pulseaudio-equalizer-ladspa pulsemixer rofi rxvt-unicode rxvt-unicode scrot socat stalonetray sublime-text-4 \
            sxhkd sxiv ttf-font-awesome-4 ttf-jetbrains-mono \
            ttf-joypixels ttf-linux-libertine unclutter unrar unzip urlscan urxvt-perls vifm w3m wmctrl xcape xclip xdo xdo xdotool \
            xmobar xmonad xmonad-contrib xmonad-utils xmonad-log xorg-server xorg-xbacklight xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo \
            xwallpaper youtube-dl zathura zathura-djvu zathura-pdf-poppler zathura-ps"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "
        arch_chroot "runuser -l ${user_name} -c 'ghc -dynamic /home/$user_name/.xmonad/xmonadctl.hs' "

    elif [ "$de_set" = "xmonad+polybar (MagyArch)" ]
    then
        #ch_chroot "pacman -S --noconfirm --needed  "
        arch_chroot "pacman -S --noconfirm --needed \
            alacritty arandr firefox calcurse discord dmenu2 docx2txt dosfstools dunst ed exfat-utils expac feh \
            ffmpeg firefox fzf gnome-keyring haskell-dbus highlight htop imagemagick libnotify lxappearance magyarch_xmonad_pacman_hook maim mediainfo mpc mpd mpv \
            ncmpcpp neofetch neovim networkmanager newsboat ntfs-3g odt2txt pavucontrol pcmanfm picom polkit-gnome polybar pulseaudio \
            pulseaudio-alsa pulseaudio-equalizer-ladspa pulsemixer rofi rxvt-unicode rxvt-unicode scrot socat sublime-text-4 \
            sxhkd sxiv ttf-font-awesome-4 ttf-jetbrains-mono \
            ttf-joypixels ttf-linux-libertine unclutter unrar unzip urlscan urxvt-perls vifm w3m wmctrl xcape xclip xdo xdo xdotool \
            xmonad xmonad-contrib xmonad-log xmonad-utils xorg-server xorg-xbacklight xorg-xdpyinfo xorg-xinit xorg-xprop xorg-xsetroot xorg-xwininfo \
            xtitle-git xwallpaper youtube-dl zathura zathura-djvu zathura-pdf-poppler zathura-ps"

        arch_chroot "rm -rf /mnt/mnt"
        arch_chroot "cd /home/$user_name/; rm -rf .git/ LICENSE README.md git.sh setup-git.sh "
        arch_chroot "runuser -l ${user_name} -c 'ghc -dynamic /home/$user_name/.xmonad/xmonadctl.hs' "


    elif [ "$de_set" = "deepin" ]
    then
        if [ "$dm_set"  = "lightdm" ]
        then
            arch_chroot "pacman -S deepin --needed --noconfirm"
            arch_chroot "sed -i  's/#greeter-session=example-gtk-gnome/greeter-session=lightdm-gtk-greeter/' /etc/lightdm/lightdm.conf"
        else
            arch_chroot "pacman -S deepin --needed --noconfirm"
        fi

    else
        arch_chroot "pacman -S --noconfirm --needed $de_set "

    fi


    if [ "$shel_l" = "zsh" ]
    then
        arch_chroot "sudo pacman -S --noconfirm zsh zsh-syntax-highlighting zsh-completions grml-zsh-config;chsh -s /usr/bin/zsh $user_name"
    elif [ "$shel_l" = "fish" ]
    then
        arch_chroot "pacman -S --noconfirm fish;chsh -s /usr/bin/fish $user_name"
    else
        arch_chroot "pacman -S --noconfirm --needed bash bash-completion;chsh -s /bin/bash $user_name"
    fi

    echo "# $INS008"

    if [ "$(echo $pack_int)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_int"
    fi

    if [ "$(echo $pack_sec)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_sec"
    fi

    if [ "$(echo $pack_med)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_med"
    fi

    if [ "$(echo $pack_ofi)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_ofi"
    fi

    if [ "$(echo $pack_uti)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_uti"
    fi

    if [ "$(echo $pack_ter)" != "" ]
    then
        arch_chroot "pacman -S --noconfirm --needed $pack_ter"
    fi

    # Set makepkg.conf
    sed -i 's/#MAKEFLAGS="-j[0-9]"/MAKEFLAGS="-j'$(nproc)'"/;s/COMPRESSXZ=(xz -c -z -)/COMPRESSXZ=(xz -c -T '$(nproc)' -z -)/;s/COMPRESSZST=(zstd -c -z -q -)/COMPRESSZST=(zstd -c -T'$(nproc)' -z -q -)/' /mnt/etc/makepkg.conf


    echo "80"

    if [ "$boot_sel" = "grub" ]
    then
        if [ "$SYSTEM" = 'BIOS' ]
        then
            echo "# $INS010"
            pacstrap /mnt grub
            #arch_chroot "os-prober"
            arch_chroot "grub-install --target=i386-pc $grb_dev"
            git clone https://github.com/magyarchlinux/magyarch_grub.git
            cp magyarch_grub/grub /mnt/etc/default/
            cp -r  magyarch_grub/MagyArchlinux /mnt/boot/grub/themes/

            arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
        else
            echo "# $INS010"

            pacstrap /mnt grub efibootmgr
            #arch_chroot "os-prober"
            arch_chroot "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=magyarchlinux1 --recheck"
            git clone https://github.com/magyarchlinux/magyarch_grub.git
            cp magyarch_grub/grub /mnt/etc/default/
            cp -r  magyarch_grub/MagyArchlinux /mnt/boot/grub/themes/

            arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
        fi

    elif [ "$boot_sel" = "refind" ]
    then
        if [ "$SYSTEM" = 'UEFI' ]
        then
            echo "# $INS010"

            arch_chroot " pacman -S refind efibootmgr --noconfirm --needed"
            # arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
            rootuuid=$(lsblk -lno PARTUUID ${root_part})
            arch_chroot "refind-install"
            echo "\"MagyArch Linux\" \"root=PARTUUID=${rootuuid} rw \"" > /mnt/boot/refind_linux.conf
            echo "\"MagyArch Linux Fallback\" \"root=PARTUUID=${rootuuid} rw initrd=/initramfs-linux-fallback.img\"" >> /mnt/boot/refind_linux.conf
            echo "\"MagyArch Linux Terminal\" \"root=PARTUUID=${rootuuid} rw systemd.unit=multi-user.target\"" >> /mnt/boot/refind_linux.conf

        fi
    fi

    echo "90"

    # Check Laptop
    if [ -z "$(ls -A /sys/class/power_supply/)" -o "$(ls -A /sys/class/power_supply)" = "AC" ]
    then
        echo "No Laptop"
    else
        echo "Laptop"
        cp /installer/40-libinput.conf /mnt/etc/X11/xorg.conf.d/
    fi

    arch_chroot "mkinitcpio -p $kern"

    umount -R /mnt

    echo "100"
    echo "# $INS011"
    ) | yad --title="$TITLE" --width=400 --height=250 --progress --auto-close --enable-log --log-expanded --no-buttons

    yad --image=info --title="$TITLE" --buttons-layout=center --text="$INS011"
    cev="$?"
    # reboot
    if [ "$cev" == 0 ]
    then
        shutdown -r now
    else
        exit 1
    fi

}

# Main
main() {

    main_diag="$(yad  --width=400 --height=480 --center \
        --buttons-layout=center --title="$TITLE" --text="$MAIN000" \
        --no-selection  --image=preferences --radiolist --list --no-headers \
        --column="" --column="" "${MAIN_LIST[@]}")"
    if [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN001" ]
    then
        installer_lang;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN012" ]
    then
        partition_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN002" ]
    then
        system_lang;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN003" ]
    then
        keyboard_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN004" ]
    then
        timezone_set;main
    # elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN005" ]
    # then
    #     hname;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN006" ]
    then
        user_root_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN007" ]
    then
        kernel_shell_cups_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN008" ]
    then
        graphics_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN009" ]
    then
        dm_desktop_set;main
    # elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN010" ]
    # then
    #     other_app_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN011" ]
    then
        bootloader_set;main
    elif [ "$(echo "$main_diag" | cut -d "|" -f2)" = "$MAIN013" ]
    then
        install_summary
    fi



}


installer_lang

main
